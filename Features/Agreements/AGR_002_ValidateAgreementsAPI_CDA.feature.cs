// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HeartTest.Features.Agreements
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AGR_002_ValidateAgreementsAPI_CDA")]
    [NUnit.Framework.CategoryAttribute("Smoke")]
    [NUnit.Framework.CategoryAttribute("agreements")]
    public partial class AGR_002_ValidateAgreementsAPI_CDAFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Smoke",
                "agreements"};
        
#line 1 "AGR_002_ValidateAgreementsAPI_CDA.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Agreements", "AGR_002_ValidateAgreementsAPI_CDA", "Description: Validate GET, POST, PUT and PATCH Requests for Agreements CDA API\r\n1" +
                    ". Basic Positive flow for Post Request\r\n2. Post for validating dependent fields " +
                    "validation", ProgrammingLanguage.CSharp, new string[] {
                        "Smoke",
                        "agreements"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_002_01_ValidateAgreementsAPI_CDA_PostRequest")]
        public virtual void AGR_002_01_ValidateAgreementsAPI_CDA_PostRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_002_01_ValidateAgreementsAPI_CDA_PostRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
          testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
         testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/purposeOfInformationExchange/hrn",
                            "agreementTypeData/purposeOfInformationExchangeOther",
                            "agreementTypeData/directionOfInformationTransfer/hrn",
                            "agreementTypeData/descriptionOfConfidentialInformation"});
                table10.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA",
                            "hrn:hrs:lists:agrmt-cda-purp-info-ex/other",
                            "Test Other Data with Post",
                            "hrn:hrs:lists:agrmt-cda-dir-info-tra/mutual",
                            "test"});
#line 14
        testRunner.When("I generate payload of Agreements for Post request for CDA API", ((string)(null)), table10, "When ");
#line hidden
#line 17
        testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
        testRunner.Then("I Validate new record after post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 19
        testRunner.Then("I perform Get request and verify the resource created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
        testRunner.And("I Validate \"title\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
        testRunner.And("I Validate \"agreementType/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
        testRunner.And("I Validate \"agreementTypeData/purposeOfInformationExchange/hrn\" attribute for Agr" +
                        "eements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
        testRunner.And("I Validate \"agreementTypeData/purposeOfInformationExchangeOther\" attribute for Ag" +
                        "reements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
        testRunner.And("I Validate \"agreementTypeData/directionOfInformationTransfer/hrn\" attribute for A" +
                        "greements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
        testRunner.And("I Validate \"agreementTypeData/descriptionOfConfidentialInformation\" attribute for" +
                        " Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_002_02_ValidateAgreementsAPI_CDA_PostRequest_FieldsDependencyValidation")]
        public virtual void AGR_002_02_ValidateAgreementsAPI_CDA_PostRequest_FieldsDependencyValidation()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_002_02_ValidateAgreementsAPI_CDA_PostRequest_FieldsDependencyValidation", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 31
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
            testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
         testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/purposeOfInformationExchange/hrn",
                            "agreementTypeData/purposeOfInformationExchangeOther",
                            "agreementTypeData/directionOfInformationTransfer/hrn",
                            "agreementTypeData/descriptionOfConfidentialInformation"});
                table11.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA",
                            "hrn:hrs:lists:agrmt-cda-purp-info-ex/facilitate-discussion-counter-party",
                            "Test Other Data with Post",
                            "hrn:hrs:lists:agrmt-cda-dir-info-tra/mutual",
                            "test"});
#line 38
        testRunner.When("I generate payload of Agreements for Post request for CDA API", ((string)(null)), table11, "When ");
#line hidden
#line 41
        testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
        testRunner.Then("I Validate the error message for conditional field PurposeOfExchangeOther in post" +
                        " request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 43
        testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/purposeOfInformationExchange/hrn",
                            "agreementTypeData/purposeOfInformationExchangeOther",
                            "agreementTypeData/directionOfInformationTransfer/hrn",
                            "agreementTypeData/descriptionOfConfidentialInformation"});
                table12.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA",
                            "hrn:hrs:lists:agrmt-cda-purp-info-ex/other",
                            "Test Other Data with Post",
                            "hrn:hrs:lists:agrmt-cda-dir-info-tra/outgoing",
                            "test"});
#line 47
        testRunner.When("I generate payload of Agreements for Post request for CDA API", ((string)(null)), table12, "When ");
#line hidden
#line 50
     testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 51
        testRunner.Then("I Validate new record after post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
        testRunner.Then("I perform Get request and verify the resource created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
        testRunner.And("I Validate \"agreementTypeData/purposeOfInformationExchange/hrn\" attribute for Agr" +
                        "eements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
        testRunner.And("I Validate \"agreementTypeData/purposeOfInformationExchangeOther\" attribute for Ag" +
                        "reements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/purposeOfInformationExchange/hrn",
                            "agreementTypeData/directionOfInformationTransfer/hrn",
                            "agreementTypeData/descriptionOfConfidentialInformation"});
                table13.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA",
                            "hrn:hrs:lists:agrmt-cda-purp-info-ex/facilitate-discussion-counter-party",
                            "hrn:hrs:lists:agrmt-cda-dir-info-tra/mutual",
                            "test"});
#line 57
        testRunner.When("I generate payload of Agreements for Post request for CDA API", ((string)(null)), table13, "When ");
#line hidden
#line 60
     testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
        testRunner.Then("I Validate new record after post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 62
        testRunner.Then("I perform Get request and verify the resource created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 63
        testRunner.And("I Validate \"agreementTypeData/purposeOfInformationExchange/hrn\" attribute for Agr" +
                        "eements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/purposeOfInformationExchange/hrn",
                            "agreementTypeData/purposeOfInformationExchangeOther",
                            "agreementTypeData/directionOfInformationTransfer/hrn",
                            "agreementTypeData/descriptionOfConfidentialInformation"});
                table14.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA",
                            "hrn:hrs:lists:agrmt-cda-purp-info-ex/other",
                            "Test Other Data with Post",
                            "hrn:hrs:lists:agrmt-cda-dir-info-tra/incoming",
                            "test"});
#line 67
        testRunner.When("I generate payload of Agreements for Post request for CDA API", ((string)(null)), table14, "When ");
#line hidden
#line 70
     testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 71
        testRunner.Then("I Validate the error message for conditional field DescriptionOfConfidentialInfor" +
                        "mation in post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
        testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/purposeOfInformationExchange/hrn",
                            "agreementTypeData/directionOfInformationTransfer/hrn",
                            "agreementTypeData/descriptionOfConfidentialInformation"});
                table15.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA",
                            "hrn:hrs:lists:agrmt-cda-purp-info-ex/review-protocol",
                            "hrn:hrs:lists:agrmt-cda-dir-info-tra/mutual",
                            "test"});
#line 75
        testRunner.When("I generate payload of Agreements for Post request for CDA API", ((string)(null)), table15, "When ");
#line hidden
#line 78
     testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 79
        testRunner.Then("I Validate new record after post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 80
        testRunner.Then("I perform Get request and verify the resource created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 81
        testRunner.And("I Validate \"agreementTypeData/directionOfInformationTransfer/hrn\" attribute for A" +
                        "greements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/purposeOfInformationExchange/hrn",
                            "agreementTypeData/purposeOfInformationExchangeOther",
                            "agreementTypeData/directionOfInformationTransfer/hrn",
                            "agreementTypeData/descriptionOfConfidentialInformation"});
                table16.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA",
                            "hrn:hrs:lists:agrmt-cda-purp-info-ex/other",
                            "Test Other Data with Post",
                            "hrn:hrs:lists:agrmt-cda-dir-info-tra/mutual",
                            "test"});
#line 84
        testRunner.When("I generate payload of Agreements for Post request for CDA API", ((string)(null)), table16, "When ");
#line hidden
#line 87
     testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 88
        testRunner.Then("I Validate new record after post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 89
        testRunner.Then("I perform Get request and verify the resource created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 90
        testRunner.And("I Validate \"agreementTypeData/directionOfInformationTransfer/hrn\" attribute for A" +
                        "greements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
        testRunner.And("I Validate \"agreementTypeData/descriptionOfConfidentialInformation\" attribute for" +
                        " Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_002_03_ValidateAgreementsAPI_CDA_PutRequest")]
        public virtual void AGR_002_03_ValidateAgreementsAPI_CDA_PutRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_002_03_ValidateAgreementsAPI_CDA_PutRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 95
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 97
     testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 98
     testRunner.Then("I retrieve data using unique key received after successful Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/purposeOfInformationExchange/hrn",
                            "agreementTypeData/purposeOfInformationExchangeOther",
                            "agreementTypeData/directionOfInformationTransfer/hrn",
                            "agreementTypeData/descriptionOfConfidentialInformation"});
                table17.AddRow(new string[] {
                            "Put_QA_id_DateStamp",
                            "Put_QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA",
                            "hrn:hrs:lists:agrmt-cda-purp-info-ex/review-protocol",
                            "null",
                            "hrn:hrs:lists:agrmt-cda-dir-info-tra/outgoing",
                            "test"});
#line 99
     testRunner.When("I update payload of Agreements for put request", ((string)(null)), table17, "When ");
#line hidden
#line 102
     testRunner.When("I perform Put request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 103
  testRunner.Then("I validate status code for Put requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
     testRunner.And("I Validate \"title\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_002_04_ValidateAgreementsAPI_CDA_PatchRequest")]
        public virtual void AGR_002_04_ValidateAgreementsAPI_CDA_PatchRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_002_04_ValidateAgreementsAPI_CDA_PatchRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 108
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 110
    testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "hrn"});
                table18.AddRow(new string[] {
                            "hrn:hrs:agreements:2132"});
#line 111
    testRunner.When("I retrieve data using unique key by Get Request for Agreements", ((string)(null)), table18, "When ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title"});
                table19.AddRow(new string[] {
                            "PATCH_QA_id",
                            "PATCH_QA_Title"});
#line 114
    testRunner.And("I update payload of Agreements for patch request", ((string)(null)), table19, "And ");
#line hidden
#line 117
    testRunner.When("I perform Patch request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 118
 testRunner.Then("I validate status code for Patch request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 119
     testRunner.And("I Validate \"title\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title"});
                table20.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp"});
#line 120
    testRunner.When("I create payload for Patch request", ((string)(null)), table20, "When ");
#line hidden
#line 123
    testRunner.When("I perform Patch request for Agreements by using the new patch payload", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 124
    testRunner.Then("I validate status code for Patch request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 125
     testRunner.And("I Validate \"title\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_002_05_ValidateAgreementsAPI_CDA_GetRequest")]
        public virtual void AGR_002_05_ValidateAgreementsAPI_CDA_GetRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_002_05_ValidateAgreementsAPI_CDA_GetRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 131
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 132
         testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 133
         testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 134
         testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 135
         testRunner.When("I perform Get request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 136
         testRunner.Then("I validate status code for Get requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 137
         testRunner.Then("I validate Sort by \"id\" in Get Request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 138
         testRunner.Then("I validate Sort by \"dateModified\" in Get Request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 139
         testRunner.Then("I validate Sort by \"title\" in Get Request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 140
         testRunner.Then("I validate filter by \"id\" with value \"CDA02894\" in Get Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 141
        testRunner.Then("I validate filter by \"title\" with value \"PS Activities Test\" in Get Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 142
         testRunner.Then("I validate pagination by \"pageSize\" with value \"50\" in Get Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
