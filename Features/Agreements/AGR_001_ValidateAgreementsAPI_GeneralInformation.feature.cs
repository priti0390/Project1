// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HeartTest.Features.Agreements
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AGR_001_ValidateAgreementsAPI_GeneralInformation")]
    [NUnit.Framework.CategoryAttribute("Smoke")]
    [NUnit.Framework.CategoryAttribute("agreements")]
    public partial class AGR_001_ValidateAgreementsAPI_GeneralInformationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Smoke",
                "agreements"};
        
#line 1 "AGR_001_ValidateAgreementsAPI_GeneralInformation.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Agreements", "AGR_001_ValidateAgreementsAPI_GeneralInformation", "Description: Validate GET, POST, PUT and PATCH Requests for Agreements 1", ProgrammingLanguage.CSharp, new string[] {
                        "Smoke",
                        "agreements"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_001_01_ValidateAgreementsAPI_GeneralInformation_GetRequest")]
        public virtual void AGR_001_01_ValidateAgreementsAPI_GeneralInformation_GetRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_001_01_ValidateAgreementsAPI_GeneralInformation_GetRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
         testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
         testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
         testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
         testRunner.When("I perform Get request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 12
         testRunner.Then("I validate status code for Get requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
         testRunner.Then("I validate Sort by \"id\" in Get Request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 14
         testRunner.Then("I validate Sort by \"dateModified\" in Get Request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
         testRunner.Then("I validate filter by \"id\" with value \"CTA00481\" in Get Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
         testRunner.Then("I validate filter by \"title\" with value \"PUT_QA_Title\" in Get Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
         testRunner.Then("I validate pagination by \"pageSize\" with value \"50\" in Get Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_001_02_ValidateAgreementsAPI_GeneralInformation_PostRequest")]
        public virtual void AGR_001_02_ValidateAgreementsAPI_GeneralInformation_PostRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_001_02_ValidateAgreementsAPI_GeneralInformation_PostRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 24
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "firstDraftTobeGeneratedInternally",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "otherPersonnel/0/hrn",
                            "otherPersonnel/1/hrn",
                            "agreementType/hrn",
                            "agreementDraftDocument/hrn",
                            "agreementDraftDocument/name"});
                table1.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "false",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA",
                            "hrn:hrs:documents:123",
                            "sample.pdf"});
#line 25
        testRunner.When("I generate payload for Agreements for Post request for GeneralInformation API", ((string)(null)), table1, "When ");
#line hidden
#line 28
     testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
        testRunner.Then("I Validate new record after post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
        testRunner.Then("I perform Get request and verify the resource created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_001_03_ValidateAgreementsAPI_GeneralInformation_PutRequest")]
        public virtual void AGR_001_03_ValidateAgreementsAPI_GeneralInformation_PutRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_001_03_ValidateAgreementsAPI_GeneralInformation_PutRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 35
     testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 36
     testRunner.Then("I retrieve data using unique key received after successful Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "firstDraftTobeGeneratedInternally",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "otherPersonnel/0/hrn",
                            "otherPersonnel/1/hrn",
                            "agreementType/hrn",
                            "agreementDraftDocument/hrn",
                            "agreementDraftDocument/name"});
                table2.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "false",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/MTA",
                            "hrn:hrs:documents:123",
                            "sample.pdf"});
#line 37
     testRunner.When("I update payload of Agreements for put request", ((string)(null)), table2, "When ");
#line hidden
#line 40
     testRunner.When("I perform Put request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
  testRunner.Then("I validate status code for Put requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
     testRunner.And("I Validate \"title\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
     testRunner.And("I Validate \"principalInvestigator/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
     testRunner.And("I Validate \"primaryContact/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
     testRunner.And("I Validate \"responsibleUnit/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
       testRunner.And("I Validate \"counterParties/0/organization/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
       testRunner.And("I Validate \"counterParties/0/person/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
       testRunner.And("I Validate \"agreementType/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_001_04_ValidateAgreementsAPI_GeneralInformation_PatchRequest")]
        public virtual void AGR_001_04_ValidateAgreementsAPI_GeneralInformation_PatchRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_001_04_ValidateAgreementsAPI_GeneralInformation_PatchRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 54
    testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "hrn"});
                table3.AddRow(new string[] {
                            "hrn:hrs:agreements:765"});
#line 55
    testRunner.When("I retrieve data using unique key by Get Request for Agreements", ((string)(null)), table3, "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "otherPersonnel/0/hrn",
                            "otherPersonnel/1/hrn",
                            "agreementType/hrn",
                            "agreementDraftDocument/hrn",
                            "agreementDraftDocument/name"});
                table4.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA",
                            "hrn:hrs:documents:123",
                            "sample.pdf"});
#line 58
    testRunner.And("I update payload of Agreements for patch request", ((string)(null)), table4, "And ");
#line hidden
#line 61
    testRunner.When("I perform Patch request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 62
 testRunner.Then("I validate status code for Patch request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 63
      testRunner.And("I Validate \"principalInvestigator/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
     testRunner.And("I Validate \"primaryContact/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
     testRunner.And("I Validate \"responsibleUnit/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
       testRunner.And("I Validate \"counterParties/0/organization/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
       testRunner.And("I Validate \"counterParties/0/person/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
       testRunner.And("I Validate \"agreementType/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_001_05_ErrorMessageValidationforGeneralInformationAPI")]
        public virtual void AGR_001_05_ErrorMessageValidationforGeneralInformationAPI()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_001_05_ErrorMessageValidationforGeneralInformationAPI", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 73
          this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "otherPersonnel/0/hrn",
                            "otherPersonnel/1/hrn",
                            "agreementType/hrn"});
                table5.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA"});
#line 76
         testRunner.When("I generate payload for Agreements for Post request for GeneralInformation API", ((string)(null)), table5, "When ");
#line hidden
#line 79
        testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 80
        testRunner.Then("I Validate the error message for missing required field principalInvestigator in " +
                        "post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 81
        testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "otherPersonnel/0/hrn",
                            "otherPersonnel/1/hrn",
                            "agreementType/hrn"});
                table6.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA"});
#line 84
         testRunner.When("I generate payload for Agreements for Post request for GeneralInformation API", ((string)(null)), table6, "When ");
#line hidden
#line 87
        testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 88
        testRunner.Then("I Validate the error message for  missing required field primaryContact  in post " +
                        "request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 89
        testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "otherPersonnel/0/hrn",
                            "otherPersonnel/1/hrn"});
                table7.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301"});
#line 92
         testRunner.When("I generate payload for Agreements for Post request for GeneralInformation API", ((string)(null)), table7, "When ");
#line hidden
#line 95
        testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 96
        testRunner.Then("I Validate the error message for missing required field agreementType  in post re" +
                        "quest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
        testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "otherPersonnel/0/hrn",
                            "otherPersonnel/1/hrn",
                            "agreementType/hrn"});
                table8.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA"});
#line 100
         testRunner.When("I generate payload for Agreements for Post request for GeneralInformation API", ((string)(null)), table8, "When ");
#line hidden
#line 103
        testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 104
        testRunner.Then("I Validate the error message for missing required field responsibleUnit  in post " +
                        "request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 105
        testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "agreementType/hrn",
                            "otherPersonnel/0/hrn",
                            "otherPersonnel/1/hrn"});
                table9.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:lists:agrmt-types/CDA",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301"});
#line 108
         testRunner.When("I generate payload for Agreements for Post request for GeneralInformation API", ((string)(null)), table9, "When ");
#line hidden
#line 111
        testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 112
        testRunner.Then("I Validate the error message for missing required field counterParties  in post r" +
                        "equest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 113
        testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
