// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HeartTest.Features.Agreements
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AGR_011_ValidateAgreementsAPI_Activities_Close")]
    [NUnit.Framework.CategoryAttribute("Smoke")]
    [NUnit.Framework.CategoryAttribute("agreements")]
    public partial class AGR_011_ValidateAgreementsAPI_Activities_CloseFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Smoke",
                "agreements"};
        
#line 1 "AGR_026_ValidateAgreementsAPI_Activities_Close.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Agreements", "AGR_011_ValidateAgreementsAPI_Activities_Close", "Description: Validate different activities api for Agreements", ProgrammingLanguage.CSharp, new string[] {
                        "Smoke",
                        "agreements"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_011_01_ValidateAgreementsAPI_Activities_Close_CreateAgreement")]
        public virtual void AGR_011_01_ValidateAgreementsAPI_Activities_Close_CreateAgreement()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_011_01_ValidateAgreementsAPI_Activities_Close_CreateAgreement", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
        testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
        testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table335 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/purposeOfInformationExchange/hrn",
                            "agreementTypeData/purposeOfInformationExchangeOther",
                            "agreementTypeData/directionOfInformationTransfer/hrn",
                            "agreementTypeData/descriptionOfConfidentialInformation"});
                table335.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA",
                            "hrn:hrs:lists:agrmt-cda-purp-info-ex/other",
                            "Test Other Data with Post",
                            "hrn:hrs:lists:agrmt-cda-dir-info-tra/mutual",
                            "test"});
#line 12
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table335, "When ");
#line hidden
#line 15
       testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
       testRunner.Then("I perform Get request and verify the resource created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
        testRunner.And("I perform Get Request and Validate value of \"activityState\" attribute is \"PreSubm" +
                        "ission\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_011_02_ValidateAgreementsAPI_Activities_Close_PreSubmission")]
        public virtual void AGR_011_02_ValidateAgreementsAPI_Activities_Close_PreSubmission()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_011_02_ValidateAgreementsAPI_Activities_Close_PreSubmission", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Close\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table336 = new TechTalk.SpecFlow.Table(new string[] {
                            "isEarlyTermination"});
                table336.AddRow(new string[] {
                            "false"});
#line 23
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table336, "When ");
#line hidden
#line 26
        testRunner.Then("I verify \"Close\" activity with request body is not allowed in \"PreSubmission\" sta" +
                        "te and validate the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 28
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"PreSubm" +
                        "ission\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_011_03_ValidateAgreementsAPI_Activities_Close_Unassigned")]
        public virtual void AGR_011_03_ValidateAgreementsAPI_Activities_Close_Unassigned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_011_03_ValidateAgreementsAPI_Activities_Close_Unassigned", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 32
        testRunner.Given("I execute \"Submit\" activity using Post request and activity state is updated to \"" +
                        "Unassigned\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 34
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Close\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table337 = new TechTalk.SpecFlow.Table(new string[] {
                            "isEarlyTermination"});
                table337.AddRow(new string[] {
                            "false"});
#line 35
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table337, "When ");
#line hidden
#line 38
        testRunner.Then("I verify \"Close\" activity with request body is not allowed in \"Unassigned\" state " +
                        "and validate the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 40
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Unassig" +
                        "ned\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_011_04_ValidateAgreementsAPI_Activities_Close_InternalReview")]
        public virtual void AGR_011_04_ValidateAgreementsAPI_Activities_Close_InternalReview()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_011_04_ValidateAgreementsAPI_Activities_Close_InternalReview", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 45
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table338 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table338.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 46
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table338, "When ");
#line hidden
#line 49
         testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 51
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Close\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table339 = new TechTalk.SpecFlow.Table(new string[] {
                            "isEarlyTermination"});
                table339.AddRow(new string[] {
                            "false"});
#line 52
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table339, "When ");
#line hidden
#line 55
        testRunner.Then("I verify \"Close\" activity with request body is not allowed in \"InternalReview\" st" +
                        "ate and validate the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 57
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Interna" +
                        "lReview\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_011_05_ValidateAgreementsAPI_Activities_Close_ExternalReview")]
        public virtual void AGR_011_05_ValidateAgreementsAPI_Activities_Close_ExternalReview()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_011_05_ValidateAgreementsAPI_Activities_Close_ExternalReview", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 62
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/MoveToExter" +
                        "nalReview\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table340 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url"});
                table340.AddRow(new string[] {
                            "test",
                            "doc.url"});
#line 63
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table340, "When ");
#line hidden
#line 66
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Close\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table341 = new TechTalk.SpecFlow.Table(new string[] {
                            "isEarlyTermination"});
                table341.AddRow(new string[] {
                            "false"});
#line 69
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table341, "When ");
#line hidden
#line 72
        testRunner.Then("I verify \"Close\" activity with request body is not allowed in \"ExternalReview\" st" +
                        "ate and validate the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 74
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Externa" +
                        "lReview\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_011_06_ValidateAgreementsAPI_Activities_Close_PIConcurrenceRequested")]
        public virtual void AGR_011_06_ValidateAgreementsAPI_Activities_Close_PIConcurrenceRequested()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_011_06_ValidateAgreementsAPI_Activities_Close_PIConcurrenceRequested", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 79
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 80
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 82
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/RequestPICo" +
                        "ncurrence\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table342 = new TechTalk.SpecFlow.Table(new string[] {
                            "commentsConcurrenceRequest"});
                table342.AddRow(new string[] {
                            "test"});
#line 83
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table342, "When ");
#line hidden
#line 86
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 88
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Close\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table343 = new TechTalk.SpecFlow.Table(new string[] {
                            "isEarlyTermination"});
                table343.AddRow(new string[] {
                            "false"});
#line 89
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table343, "When ");
#line hidden
#line 92
        testRunner.Then("I verify \"Close\" activity with request body is not allowed in \"PIConcurrenceReque" +
                        "sted\" state and validate the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 93
               testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 94
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"PIConcu" +
                        "rrenceRequested\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_011_07_ValidateAgreementsAPI_Activities_Close_ClarificationRequested")]
        public virtual void AGR_011_07_ValidateAgreementsAPI_Activities_Close_ClarificationRequested()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_011_07_ValidateAgreementsAPI_Activities_Close_ClarificationRequested", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 97
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 99
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 100
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 102
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/RequestClar" +
                        "ification\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table344 = new TechTalk.SpecFlow.Table(new string[] {
                            "commentsClarificationRequest"});
                table344.AddRow(new string[] {
                            "Test comments Clarification Request"});
#line 103
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table344, "When ");
#line hidden
#line 106
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 108
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Close\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table345 = new TechTalk.SpecFlow.Table(new string[] {
                            "isEarlyTermination"});
                table345.AddRow(new string[] {
                            "false"});
#line 109
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table345, "When ");
#line hidden
#line 112
        testRunner.Then("I verify \"Close\" activity with request body is not allowed in \"ClarificationReque" +
                        "sted\" state and validate the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 113
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 114
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Clarifi" +
                        "cationRequested\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_011_08_ValidateAgreementsAPI_Activities_Close_ReadyForSignature")]
        public virtual void AGR_011_08_ValidateAgreementsAPI_Activities_Close_ReadyForSignature()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_011_08_ValidateAgreementsAPI_Activities_Close_ReadyForSignature", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 117
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 119
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 120
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 122
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table346 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table346.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 123
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table346, "When ");
#line hidden
#line 126
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 128
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/FinalizeTer" +
                        "ms\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table347 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url"});
                table347.AddRow(new string[] {
                            "test",
                            "doc.url"});
#line 129
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table347, "When ");
#line hidden
#line 132
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 134
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Close\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table348 = new TechTalk.SpecFlow.Table(new string[] {
                            "isEarlyTermination"});
                table348.AddRow(new string[] {
                            "false"});
#line 135
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table348, "When ");
#line hidden
#line 138
        testRunner.Then("I verify \"Close\" activity with request body is not allowed in \"ReadyForSignature\"" +
                        " state and validate the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 139
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 140
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"ReadyFo" +
                        "rSignature\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_011_09_ValidateAgreementsAPI_Activities_Close_InternalSignature")]
        public virtual void AGR_011_09_ValidateAgreementsAPI_Activities_Close_InternalSignature()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_011_09_ValidateAgreementsAPI_Activities_Close_InternalSignature", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 143
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 145
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 146
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 148
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table349 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table349.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 149
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table349, "When ");
#line hidden
#line 152
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 154
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/FinalizeTer" +
                        "ms\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table350 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url"});
                table350.AddRow(new string[] {
                            "test",
                            "doc.url"});
#line 155
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table350, "When ");
#line hidden
#line 158
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 160
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/SendForSign" +
                        "atures\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table351 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url",
                            "signatureType/hrn",
                            "signatureTransition/hrn"});
                table351.AddRow(new string[] {
                            "test",
                            "doc.url",
                            "hrn:hrs:lists:activity-signature-types/institutional-esign",
                            "hrn:hrs:lists:activity-signature-transitions/internal-signature"});
#line 161
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table351, "When ");
#line hidden
#line 164
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 166
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Close\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table352 = new TechTalk.SpecFlow.Table(new string[] {
                            "isEarlyTermination"});
                table352.AddRow(new string[] {
                            "false"});
#line 167
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table352, "When ");
#line hidden
#line 170
        testRunner.Then("I verify \"Close\" activity with request body is not allowed in \"InternalSignature\"" +
                        " state and validate the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 171
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 172
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Interna" +
                        "lSignature\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_011_10_ValidateAgreementsAPI_Activities_Close_ExternalSignature")]
        public virtual void AGR_011_10_ValidateAgreementsAPI_Activities_Close_ExternalSignature()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_011_10_ValidateAgreementsAPI_Activities_Close_ExternalSignature", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 175
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 177
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table353 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/purposeOfInformationExchange/hrn",
                            "agreementTypeData/purposeOfInformationExchangeOther",
                            "agreementTypeData/directionOfInformationTransfer/hrn",
                            "agreementTypeData/descriptionOfConfidentialInformation"});
                table353.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA",
                            "hrn:hrs:lists:agrmt-cda-purp-info-ex/other",
                            "Test Other Data with Post",
                            "hrn:hrs:lists:agrmt-cda-dir-info-tra/mutual",
                            "test"});
#line 178
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table353, "When ");
#line hidden
#line 181
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 183
        testRunner.Given("I execute \"Submit\" activity using Post request and activity state is updated to \"" +
                        "Unassigned\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 185
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table354 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table354.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 186
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table354, "When ");
#line hidden
#line 189
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 191
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/FinalizeTer" +
                        "ms\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table355 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url"});
                table355.AddRow(new string[] {
                            "test",
                            "doc.url"});
#line 192
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table355, "When ");
#line hidden
#line 195
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 197
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/SendForSign" +
                        "atures\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table356 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url",
                            "signatureType/hrn",
                            "signatureTransition/hrn"});
                table356.AddRow(new string[] {
                            "test",
                            "doc.url",
                            "hrn:hrs:lists:activity-signature-types/institutional-esign",
                            "hrn:hrs:lists:activity-signature-transitions/external-signature"});
#line 198
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table356, "When ");
#line hidden
#line 201
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 203
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Close\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table357 = new TechTalk.SpecFlow.Table(new string[] {
                            "isEarlyTermination"});
                table357.AddRow(new string[] {
                            "false"});
#line 204
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table357, "When ");
#line hidden
#line 207
        testRunner.Then("I verify \"Close\" activity with request body is not allowed in \"ExternalSignature\"" +
                        " state and validate the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 208
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 209
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Externa" +
                        "lSignature\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_011_11_ValidateAgreementsAPI_Activities_Close_Active")]
        public virtual void AGR_011_11_ValidateAgreementsAPI_Activities_Close_Active()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_011_11_ValidateAgreementsAPI_Activities_Close_Active", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 212
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 214
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/FinalizeTer" +
                        "ms\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table358 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url"});
                table358.AddRow(new string[] {
                            "test",
                            "doc.url"});
#line 215
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table358, "When ");
#line hidden
#line 218
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 220
         testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/SendForSign" +
                        "atures\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table359 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url",
                            "signatureType/hrn",
                            "signatureTransition/hrn"});
                table359.AddRow(new string[] {
                            "test",
                            "doc.url",
                            "hrn:hrs:lists:activity-signature-types/institutional-esign",
                            "hrn:hrs:lists:activity-signature-transitions/external-signature"});
#line 221
         testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table359, "When ");
#line hidden
#line 224
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 226
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Activate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table360 = new TechTalk.SpecFlow.Table(new string[] {
                            "effectiveDate"});
                table360.AddRow(new string[] {
                            "2021-02-25"});
#line 227
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table360, "When ");
#line hidden
#line 230
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 232
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Close\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table361 = new TechTalk.SpecFlow.Table(new string[] {
                            "isEarlyTermination"});
                table361.AddRow(new string[] {
                            "false"});
#line 233
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table361, "When ");
#line hidden
#line 236
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 237
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 238
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Closed\"" +
                        " for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_011_12_ValidateAgreementsAPI_Activities_Close_Discard")]
        public virtual void AGR_011_12_ValidateAgreementsAPI_Activities_Close_Discard()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_011_12_ValidateAgreementsAPI_Activities_Close_Discard", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 241
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 243
         testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table362 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/purposeOfInformationExchange/hrn",
                            "agreementTypeData/purposeOfInformationExchangeOther",
                            "agreementTypeData/directionOfInformationTransfer/hrn",
                            "agreementTypeData/descriptionOfConfidentialInformation"});
                table362.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA",
                            "hrn:hrs:lists:agrmt-cda-purp-info-ex/other",
                            "Test Other Data with Post",
                            "hrn:hrs:lists:agrmt-cda-dir-info-tra/mutual",
                            "test"});
#line 244
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table362, "When ");
#line hidden
#line 247
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 249
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Discard\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table363 = new TechTalk.SpecFlow.Table(new string[] {
                            "comments"});
                table363.AddRow(new string[] {
                            "Test"});
#line 250
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table363, "When ");
#line hidden
#line 253
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 255
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Discard\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 256
        testRunner.Then("I verify \"Discard\" activity is not allowed in \"Discarded\" state and validate the " +
                        "error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 257
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 258
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Discard" +
                        "ed\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
