// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HeartTest.Features.Agreements
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AGR_015_ValidateAgreementsAPI_Activities_Submit")]
    [NUnit.Framework.CategoryAttribute("Smoke")]
    [NUnit.Framework.CategoryAttribute("agreements")]
    public partial class AGR_015_ValidateAgreementsAPI_Activities_SubmitFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Smoke",
                "agreements"};
        
#line 1 "AGR_015_ValidateAgreementsAPI_Activities_Submit.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Agreements", "AGR_015_ValidateAgreementsAPI_Activities_Submit", "Description: Validate different activities api for Agreements", ProgrammingLanguage.CSharp, new string[] {
                        "Smoke",
                        "agreements"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_015_01_ValidateAgreementsActivitiesAPI_Submit_CreateAgreement")]
        public virtual void AGR_015_01_ValidateAgreementsActivitiesAPI_Submit_CreateAgreement()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_015_01_ValidateAgreementsActivitiesAPI_Submit_CreateAgreement", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
        testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
        testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/purposeOfInformationExchange/hrn",
                            "agreementTypeData/purposeOfInformationExchangeOther",
                            "agreementTypeData/directionOfInformationTransfer/hrn",
                            "agreementTypeData/descriptionOfConfidentialInformation"});
                table94.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA",
                            "hrn:hrs:lists:agrmt-cda-purp-info-ex/other",
                            "Test Other Data with Post",
                            "hrn:hrs:lists:agrmt-cda-dir-info-tra/mutual",
                            "test"});
#line 12
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table94, "When ");
#line hidden
#line 15
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
       testRunner.Then("I perform Get request and verify the resource created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
        testRunner.And("I perform Get Request and Validate value of \"activityState\" attribute is \"PreSubm" +
                        "ission\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_015_02_ValidateAgreementsActivitiesAPI_Submit_PreSubmission")]
        public virtual void AGR_015_02_ValidateAgreementsActivitiesAPI_Submit_PreSubmission()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_015_02_ValidateAgreementsActivitiesAPI_Submit_PreSubmission", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Submit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 25
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Unassig" +
                        "ned\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_015_03_ValidateAgreementsAPI_Activities_Submit_Unassigned")]
        public virtual void AGR_015_03_ValidateAgreementsAPI_Activities_Submit_Unassigned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_015_03_ValidateAgreementsAPI_Activities_Submit_Unassigned", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 30
        testRunner.Given("I execute \"Submit\" activity using Post request and activity state is updated to \"" +
                        "Unassigned\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Submit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 33
        testRunner.Then("I verify \"Submit\" activity is not allowed in \"Unassigned\" state and validate the " +
                        "error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 35
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Unassig" +
                        "ned\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_015_04_ValidateAgreementsAPI_Activities_Submit_InternalReview")]
        public virtual void AGR_015_04_ValidateAgreementsAPI_Activities_Submit_InternalReview()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_015_04_ValidateAgreementsAPI_Activities_Submit_InternalReview", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 40
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table95.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 41
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table95, "When ");
#line hidden
#line 44
         testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Submit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 47
        testRunner.Then("I verify \"Submit\" activity is not allowed in \"InternalReview\" state and validate " +
                        "the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 48
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 49
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Interna" +
                        "lReview\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_015_05_ValidateAgreementsAPI_Activities_Submit_ExternalReview")]
        public virtual void AGR_015_05_ValidateAgreementsAPI_Activities_Submit_ExternalReview()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_015_05_ValidateAgreementsAPI_Activities_Submit_ExternalReview", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 54
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/MoveToExter" +
                        "nalReview\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url"});
                table96.AddRow(new string[] {
                            "test",
                            "doc.url"});
#line 55
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table96, "When ");
#line hidden
#line 58
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Submit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 61
        testRunner.Then("I verify \"Submit\" activity is not allowed in \"ExternalReview\" state and validate " +
                        "the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 62
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 63
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Externa" +
                        "lReview\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_015_06_ValidateAgreementsAPI_Activities_Submit_PIConcurrenceRequested")]
        public virtual void AGR_015_06_ValidateAgreementsAPI_Activities_Submit_PIConcurrenceRequested()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_015_06_ValidateAgreementsAPI_Activities_Submit_PIConcurrenceRequested", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 68
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 69
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 71
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/RequestPICo" +
                        "ncurrence\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                            "commentsConcurrenceRequest"});
                table97.AddRow(new string[] {
                            "test"});
#line 72
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table97, "When ");
#line hidden
#line 75
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 77
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Submit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 78
        testRunner.Then("I verify \"Submit\" activity is not allowed in \"PIConcurrenceRequested\" state and v" +
                        "alidate the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 79
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 80
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"PIConcu" +
                        "rrenceRequested\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_015_07_ValidateAgreementsAPI_Activities_Submit_ClarificationRequested")]
        public virtual void AGR_015_07_ValidateAgreementsAPI_Activities_Submit_ClarificationRequested()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_015_07_ValidateAgreementsAPI_Activities_Submit_ClarificationRequested", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 85
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 86
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 88
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/RequestClar" +
                        "ification\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                            "commentsClarificationRequest"});
                table98.AddRow(new string[] {
                            "Test comments Clarification Request"});
#line 89
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table98, "When ");
#line hidden
#line 92
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 94
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Submit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 95
        testRunner.Then("I verify \"Submit\" activity is not allowed in \"ClarificationRequested\" state and v" +
                        "alidate the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 97
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Clarifi" +
                        "cationRequested\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_015_08_ValidateAgreementsAPI_Activities_Submit_ReadyForSignature")]
        public virtual void AGR_015_08_ValidateAgreementsAPI_Activities_Submit_ReadyForSignature()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_015_08_ValidateAgreementsAPI_Activities_Submit_ReadyForSignature", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 100
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 102
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 103
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 105
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table99.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 106
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table99, "When ");
#line hidden
#line 109
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 111
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/FinalizeTer" +
                        "ms\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url"});
                table100.AddRow(new string[] {
                            "test",
                            "doc.url"});
#line 112
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table100, "When ");
#line hidden
#line 115
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 117
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Submit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 118
        testRunner.Then("I verify \"Submit\" activity is not allowed in \"ReadyForSignature\" state and valida" +
                        "te the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 119
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 120
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"ReadyFo" +
                        "rSignature\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_015_09_ValidateAgreementsAPI_Activities_Submit_InternalSignature")]
        public virtual void AGR_015_09_ValidateAgreementsAPI_Activities_Submit_InternalSignature()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_015_09_ValidateAgreementsAPI_Activities_Submit_InternalSignature", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 123
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 125
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 126
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 128
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table101.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 129
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table101, "When ");
#line hidden
#line 132
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 134
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/FinalizeTer" +
                        "ms\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url"});
                table102.AddRow(new string[] {
                            "test",
                            "doc.url"});
#line 135
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table102, "When ");
#line hidden
#line 138
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 140
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/SendForSign" +
                        "atures\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url",
                            "signatureType/hrn",
                            "signatureTransition/hrn"});
                table103.AddRow(new string[] {
                            "test",
                            "doc.url",
                            "hrn:hrs:lists:activity-signature-types/institutional-esign",
                            "hrn:hrs:lists:activity-signature-transitions/internal-signature"});
#line 141
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table103, "When ");
#line hidden
#line 144
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 146
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Submit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 147
        testRunner.Then("I verify \"Submit\" activity is not allowed in \"InternalSignature\" state and valida" +
                        "te the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 148
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 149
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Interna" +
                        "lSignature\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_015_10_ValidateAgreementsAPI_Activities_Submit_ExternalSignature")]
        public virtual void AGR_015_10_ValidateAgreementsAPI_Activities_Submit_ExternalSignature()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_015_10_ValidateAgreementsAPI_Activities_Submit_ExternalSignature", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 152
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 154
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/purposeOfInformationExchange/hrn",
                            "agreementTypeData/purposeOfInformationExchangeOther",
                            "agreementTypeData/directionOfInformationTransfer/hrn",
                            "agreementTypeData/descriptionOfConfidentialInformation"});
                table104.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA",
                            "hrn:hrs:lists:agrmt-cda-purp-info-ex/other",
                            "Test Other Data with Post",
                            "hrn:hrs:lists:agrmt-cda-dir-info-tra/mutual",
                            "test"});
#line 155
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table104, "When ");
#line hidden
#line 158
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 160
        testRunner.Given("I execute \"Submit\" activity using Post request and activity state is updated to \"" +
                        "Unassigned\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 162
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table105.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 163
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table105, "When ");
#line hidden
#line 166
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 168
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/FinalizeTer" +
                        "ms\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url"});
                table106.AddRow(new string[] {
                            "test",
                            "doc.url"});
#line 169
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table106, "When ");
#line hidden
#line 172
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 174
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/SendForSign" +
                        "atures\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url",
                            "signatureType/hrn",
                            "signatureTransition/hrn"});
                table107.AddRow(new string[] {
                            "test",
                            "doc.url",
                            "hrn:hrs:lists:activity-signature-types/institutional-esign",
                            "hrn:hrs:lists:activity-signature-transitions/external-signature"});
#line 175
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table107, "When ");
#line hidden
#line 178
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 180
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Submit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 181
        testRunner.Then("I verify \"Submit\" activity is not allowed in \"ExternalSignature\" state and valida" +
                        "te the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 182
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 183
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Externa" +
                        "lSignature\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_015_11_ValidateAgreementsAPI_Activities_Submit_Active")]
        public virtual void AGR_015_11_ValidateAgreementsAPI_Activities_Submit_Active()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_015_11_ValidateAgreementsAPI_Activities_Submit_Active", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 186
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 188
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/purposeOfInformationExchange/hrn",
                            "agreementTypeData/purposeOfInformationExchangeOther",
                            "agreementTypeData/directionOfInformationTransfer/hrn",
                            "agreementTypeData/descriptionOfConfidentialInformation"});
                table108.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA",
                            "hrn:hrs:lists:agrmt-cda-purp-info-ex/other",
                            "Test Other Data with Post",
                            "hrn:hrs:lists:agrmt-cda-dir-info-tra/mutual",
                            "test"});
#line 189
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table108, "When ");
#line hidden
#line 192
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 194
        testRunner.Given("I execute \"Submit\" activity using Post request and activity state is updated to \"" +
                        "Unassigned\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 196
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table109.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 197
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table109, "When ");
#line hidden
#line 200
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 202
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/FinalizeTer" +
                        "ms\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url"});
                table110.AddRow(new string[] {
                            "test",
                            "doc.url"});
#line 203
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table110, "When ");
#line hidden
#line 206
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 208
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/SendForSign" +
                        "atures\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url",
                            "signatureType/hrn",
                            "signatureTransition/hrn"});
                table111.AddRow(new string[] {
                            "test",
                            "doc.url",
                            "hrn:hrs:lists:activity-signature-types/institutional-esign",
                            "hrn:hrs:lists:activity-signature-transitions/external-signature"});
#line 209
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table111, "When ");
#line hidden
#line 212
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 214
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Activate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                            "effectiveDate"});
                table112.AddRow(new string[] {
                            "2021-02-25"});
#line 215
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table112, "When ");
#line hidden
#line 218
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 220
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Submit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 221
        testRunner.Then("I verify \"Submit\" activity is not allowed in \"Active\" state and validate the erro" +
                        "r message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 222
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 223
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Active\"" +
                        " for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_015_12_ValidateAgreementsAPI_Activities_Submit_Discarded")]
        public virtual void AGR_015_12_ValidateAgreementsAPI_Activities_Submit_Discarded()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_015_12_ValidateAgreementsAPI_Activities_Submit_Discarded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 226
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 228
         testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/purposeOfInformationExchange/hrn",
                            "agreementTypeData/purposeOfInformationExchangeOther",
                            "agreementTypeData/directionOfInformationTransfer/hrn",
                            "agreementTypeData/descriptionOfConfidentialInformation"});
                table113.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA",
                            "hrn:hrs:lists:agrmt-cda-purp-info-ex/other",
                            "Test Other Data with Post",
                            "hrn:hrs:lists:agrmt-cda-dir-info-tra/mutual",
                            "test"});
#line 229
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table113, "When ");
#line hidden
#line 232
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 234
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Discard\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                            "comments"});
                table114.AddRow(new string[] {
                            "Test"});
#line 235
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table114, "When ");
#line hidden
#line 238
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 240
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Submit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 241
        testRunner.Then("I verify \"Submit\" activity is not allowed in \"Discarded\" state and validate the e" +
                        "rror message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 242
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 243
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Discard" +
                        "ed\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
