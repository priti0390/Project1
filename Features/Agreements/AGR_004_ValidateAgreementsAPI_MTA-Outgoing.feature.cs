// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HeartTest.Features.Agreements
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AGR_004_ValidateAgreementsAPI_MTA-Outgoing")]
    [NUnit.Framework.CategoryAttribute("Smoke")]
    [NUnit.Framework.CategoryAttribute("agreements")]
    public partial class AGR_004_ValidateAgreementsAPI_MTA_OutgoingFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Smoke",
                "agreements"};
        
#line 1 "AGR_004_ValidateAgreementsAPI_MTA-Outgoing.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Agreements", "AGR_004_ValidateAgreementsAPI_MTA-Outgoing", "\tDescription: Validate GET, POST, PUT and PATCH Requests for MTA Agreements API ", ProgrammingLanguage.CSharp, new string[] {
                        "Smoke",
                        "agreements"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_004_01_ValidateAgreementsAPI_MTA-Outgoing_Origin_Purchasedorprovidedbythirdpa" +
            "rty_PostRequest")]
        public virtual void AGR_004_01_ValidateAgreementsAPI_MTA_Outgoing_Origin_Purchasedorprovidedbythirdparty_PostRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_004_01_ValidateAgreementsAPI_MTA-Outgoing_Origin_Purchasedorprovidedbythirdpa" +
                    "rty_PostRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
  testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
        testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
        testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/directionMaterialTransfer/hrn",
                            "agreementTypeData/origin/hrn",
                            "agreementTypeData/fundingProjects/0/id",
                            "agreementTypeData/fundingProjects/1/id",
                            "agreementTypeData/fundingProjectDocuments/0/url",
                            "agreementTypeData/sowDocuments/0/url",
                            "agreementTypeData/isExportingOutsideUsa",
                            "agreementTypeData/exportingCountries/0/hrn",
                            "agreementTypeData/exportingCountries/1/hrn",
                            "agreementTypeData/isReimbursable",
                            "agreementTypeData/reimbursementAmount",
                            "agreementTypeData/isSubjectToPatent",
                            "agreementTypeData/pocTechTransfer/hrn",
                            "agreementTypeData/originOther"});
                table32.AddRow(new string[] {
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/MTA",
                            "hrn:hrs:lists:agrmt-mta-direction-mt/outgoing",
                            "hrn:hrs:lists:agrmt-mta-origin/third-party",
                            "MTA00001",
                            "MTA00021",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/cis-aerdcrt.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/sowagreement1.pdf",
                            "true",
                            "hrn:hrs:lists:countries/italy",
                            "hrn:hrs:lists:countries/croatia",
                            "true",
                            "0.099",
                            "true",
                            "hrn:hrs:persons:301",
                            "null"});
#line 11
        testRunner.When("I generate payload of Agreements for Post request for MTA-Outgoing API", ((string)(null)), table32, "When ");
#line hidden
#line 14
         testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
        testRunner.Then("I Validate new record after post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
        testRunner.Then("I perform Get request and verify the resource created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_004_02_ValidateAgreementsAPI_MTA-Outgoing_Origin_Purchasedorprovidedbythirdpa" +
            "rty_PutRequest")]
        public virtual void AGR_004_02_ValidateAgreementsAPI_MTA_Outgoing_Origin_Purchasedorprovidedbythirdparty_PutRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_004_02_ValidateAgreementsAPI_MTA-Outgoing_Origin_Purchasedorprovidedbythirdpa" +
                    "rty_PutRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
     testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
     testRunner.Then("I retrieve data using unique key received after successful Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementType/hrn",
                            "agreementTypeData/directionMaterialTransfer/hrn",
                            "agreementTypeData/origin/hrn",
                            "agreementTypeData/fundingProjects/0/id",
                            "agreementTypeData/fundingProjects/1/id",
                            "agreementTypeData/fundingProjectDocuments/0/url",
                            "agreementTypeData/sowDocuments/0/url",
                            "agreementTypeData/isExportingOutsideUsa",
                            "agreementTypeData/exportingCountries/0/hrn",
                            "agreementTypeData/exportingCountries/1/hrn",
                            "agreementTypeData/isReimbursable",
                            "agreementTypeData/reimbursementAmount",
                            "agreementTypeData/isSubjectToPatent",
                            "agreementTypeData/pocTechTransfer/hrn"});
                table33.AddRow(new string[] {
                            "hrn:hrs:lists:agrmt-types/MTA",
                            "hrn:hrs:lists:agrmt-mta-direction-mt/outgoing",
                            "hrn:hrs:lists:agrmt-mta-origin/third-party",
                            "MTA00001",
                            "MTA00021",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/cis-aerdcrt.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/sowagreement1.pdf",
                            "true",
                            "hrn:hrs:lists:countries/italy",
                            "hrn:hrs:lists:countries/croatia",
                            "true",
                            "0.099",
                            "true",
                            "hrn:hrs:persons:301"});
#line 24
      testRunner.When("I update payload of Agreements for put request", ((string)(null)), table33, "When ");
#line hidden
#line 27
     testRunner.When("I perform Put request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
  testRunner.Then("I validate status code for Put requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
      testRunner.And("I Validate \"agreementType/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
      testRunner.And("I Validate \"agreementTypeData/directionMaterialTransfer/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
      testRunner.And("I Validate \"agreementTypeData/origin/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
      testRunner.And("I Validate \"agreementTypeData/fundingProjects/0/id\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
      testRunner.And("I Validate \"agreementTypeData/isExportingOutsideUsa\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
      testRunner.And("I Validate \"agreementTypeData/exportingCountries/1/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
      testRunner.And("I Validate \"agreementTypeData/isReimbursable\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
      testRunner.And("I Validate \"agreementTypeData/isSubjectToPatent\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_004_03_ValidateAgreementsAPI_MTA-Outgoing_Origin_Purchasedorprovidedbythirdpa" +
            "rty_PatchRequest")]
        public virtual void AGR_004_03_ValidateAgreementsAPI_MTA_Outgoing_Origin_Purchasedorprovidedbythirdparty_PatchRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_004_03_ValidateAgreementsAPI_MTA-Outgoing_Origin_Purchasedorprovidedbythirdpa" +
                    "rty_PatchRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 42
   testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "hrn"});
                table34.AddRow(new string[] {
                            "hrn:hrs:agreements:742"});
#line 43
    testRunner.When("I retrieve data using unique key by Get Request for Agreements", ((string)(null)), table34, "When ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementType/hrn",
                            "agreementTypeData/directionMaterialTransfer/hrn",
                            "agreementTypeData/origin/hrn",
                            "agreementTypeData/fundingProjects/0/id",
                            "agreementTypeData/fundingProjects/1/id",
                            "agreementTypeData/fundingProjectDocuments/0/url",
                            "agreementTypeData/sowDocuments/0/url",
                            "agreementTypeData/isExportingOutsideUsa",
                            "agreementTypeData/exportingCountries/0/hrn",
                            "agreementTypeData/exportingCountries/1/hrn",
                            "agreementTypeData/isReimbursable",
                            "agreementTypeData/reimbursementAmount",
                            "agreementTypeData/isSubjectToPatent",
                            "agreementTypeData/pocTechTransfer/hrn"});
                table35.AddRow(new string[] {
                            "hrn:hrs:lists:agrmt-types/MTA",
                            "hrn:hrs:lists:agrmt-mta-direction-mt/outgoing",
                            "hrn:hrs:lists:agrmt-mta-origin/third-party",
                            "MTA00001",
                            "MTA00021",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/cis-aerdcrt.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/sowagreement1.pdf",
                            "true",
                            "hrn:hrs:lists:countries/italy",
                            "hrn:hrs:lists:countries/croatia",
                            "true",
                            "0.099",
                            "true",
                            "hrn:hrs:persons:301"});
#line 46
    testRunner.And("I update payload of Agreements for patch request", ((string)(null)), table35, "And ");
#line hidden
#line 49
    testRunner.When("I perform Patch request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
 testRunner.Then("I validate status code for Patch request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
       testRunner.And("I Validate \"agreementType/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
      testRunner.And("I Validate \"agreementTypeData/directionMaterialTransfer/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
      testRunner.And("I Validate \"agreementTypeData/origin/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
      testRunner.And("I Validate \"agreementTypeData/fundingProjects/0/id\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
      testRunner.And("I Validate \"agreementTypeData/isExportingOutsideUsa\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
      testRunner.And("I Validate \"agreementTypeData/exportingCountries/1/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 57
      testRunner.And("I Validate \"agreementTypeData/isReimbursable\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
      testRunner.And("I Validate \"agreementTypeData/isSubjectToPatent\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_004_04_ValidateAgreementsAPI_MTA-Outgoing_Origin_GeneratedInternallybythirdpa" +
            "rty_PostRequest")]
        public virtual void AGR_004_04_ValidateAgreementsAPI_MTA_Outgoing_Origin_GeneratedInternallybythirdparty_PostRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_004_04_ValidateAgreementsAPI_MTA-Outgoing_Origin_GeneratedInternallybythirdpa" +
                    "rty_PostRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 62
  testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 63
        testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
        testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "title",
                            "firstDraftTobeGeneratedInternally",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "otherPersonnel/0/hrn",
                            "otherPersonnel/1/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/directionMaterialTransfer/hrn",
                            "agreementTypeData/origin/hrn",
                            "agreementTypeData/fundingProjects/0/id",
                            "agreementTypeData/fundingProjects/1/id",
                            "agreementTypeData/fundingProjectDocuments/0/url",
                            "agreementTypeData/sowDocuments/0/url",
                            "agreementTypeData/isExportingOutsideUsa",
                            "agreementTypeData/exportingCountries/0/hrn",
                            "agreementTypeData/exportingCountries/1/hrn",
                            "agreementTypeData/isReimbursable",
                            "agreementTypeData/reimbursementAmount",
                            "agreementTypeData/isSubjectToPatent",
                            "agreementTypeData/pocTechTransfer/hrn",
                            "agreementTypeData/originOther"});
                table36.AddRow(new string[] {
                            "QA_Title_DateStamp",
                            "true",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/MTA",
                            "hrn:hrs:lists:agrmt-mta-direction-mt/outgoing",
                            "hrn:hrs:lists:agrmt-mta-origin/internal-tp",
                            "MTA00001",
                            "MTA00021",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/cis-aerdcrt.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/sowagreement1.pdf",
                            "true",
                            "hrn:hrs:lists:countries/italy",
                            "hrn:hrs:lists:countries/croatia",
                            "true",
                            "0.099",
                            "true",
                            "hrn:hrs:persons:301",
                            "null"});
#line 65
        testRunner.When("I generate payload of Agreements for Post request for MTA-Outgoing API", ((string)(null)), table36, "When ");
#line hidden
#line 68
         testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 69
        testRunner.Then("I Validate new record after post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
        testRunner.Then("I perform Get request and verify the resource created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_004_05_ValidateAgreementsAPI_MTA-Outgoing_Origin_GeneratedInternallybythirdpa" +
            "rty_PutRequest")]
        public virtual void AGR_004_05_ValidateAgreementsAPI_MTA_Outgoing_Origin_GeneratedInternallybythirdparty_PutRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_004_05_ValidateAgreementsAPI_MTA-Outgoing_Origin_GeneratedInternallybythirdpa" +
                    "rty_PutRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 76
  testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 77
     testRunner.Then("I retrieve data using unique key received after successful Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementType/hrn",
                            "agreementTypeData/directionMaterialTransfer/hrn",
                            "agreementTypeData/origin/hrn",
                            "agreementTypeData/fundingProjects/0/id",
                            "agreementTypeData/fundingProjects/1/id",
                            "agreementTypeData/fundingProjectDocuments/0/url",
                            "agreementTypeData/sowDocuments/0/url",
                            "agreementTypeData/isExportingOutsideUsa",
                            "agreementTypeData/exportingCountries/0/hrn",
                            "agreementTypeData/exportingCountries/1/hrn",
                            "agreementTypeData/isReimbursable",
                            "agreementTypeData/reimbursementAmount",
                            "agreementTypeData/isSubjectToPatent",
                            "agreementTypeData/pocTechTransfer/hrn"});
                table37.AddRow(new string[] {
                            "hrn:hrs:lists:agrmt-types/MTA",
                            "hrn:hrs:lists:agrmt-mta-direction-mt/outgoing",
                            "hrn:hrs:lists:agrmt-mta-origin/internal-tp",
                            "MTA00001",
                            "MTA00021",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/cis-aerdcrt.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/sowagreement1.pdf",
                            "true",
                            "hrn:hrs:lists:countries/italy",
                            "hrn:hrs:lists:countries/croatia",
                            "true",
                            "0.099",
                            "true",
                            "hrn:hrs:persons:301"});
#line 78
      testRunner.When("I update payload of Agreements for put request", ((string)(null)), table37, "When ");
#line hidden
#line 81
     testRunner.When("I perform Put request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 82
  testRunner.Then("I validate status code for Put requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 83
      testRunner.And("I Validate \"agreementType/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
      testRunner.And("I Validate \"agreementTypeData/directionMaterialTransfer/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
      testRunner.And("I Validate \"agreementTypeData/origin/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
      testRunner.And("I Validate \"agreementTypeData/fundingProjects/0/id\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
      testRunner.And("I Validate \"agreementTypeData/isExportingOutsideUsa\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
      testRunner.And("I Validate \"agreementTypeData/exportingCountries/1/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
      testRunner.And("I Validate \"agreementTypeData/isReimbursable\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
      testRunner.And("I Validate \"agreementTypeData/isSubjectToPatent\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_004_06_ValidateAgreementsAPI_MTA-Outgoing_Origin_GeneratedInternallybythirdpa" +
            "rty_PatchRequest")]
        public virtual void AGR_004_06_ValidateAgreementsAPI_MTA_Outgoing_Origin_GeneratedInternallybythirdparty_PatchRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_004_06_ValidateAgreementsAPI_MTA-Outgoing_Origin_GeneratedInternallybythirdpa" +
                    "rty_PatchRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 95
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 97
   testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "hrn"});
                table38.AddRow(new string[] {
                            "hrn:hrs:agreements:742"});
#line 98
    testRunner.When("I retrieve data using unique key by Get Request for Agreements", ((string)(null)), table38, "When ");
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementType/hrn",
                            "agreementTypeData/directionMaterialTransfer/hrn",
                            "agreementTypeData/origin/hrn",
                            "agreementTypeData/fundingProjects/0/id",
                            "agreementTypeData/fundingProjects/1/id",
                            "agreementTypeData/fundingProjectDocuments/0/url",
                            "agreementTypeData/sowDocuments/0/url",
                            "agreementTypeData/isExportingOutsideUsa",
                            "agreementTypeData/exportingCountries/0/hrn",
                            "agreementTypeData/exportingCountries/1/hrn",
                            "agreementTypeData/isReimbursable",
                            "agreementTypeData/reimbursementAmount",
                            "agreementTypeData/isSubjectToPatent",
                            "agreementTypeData/pocTechTransfer/hrn"});
                table39.AddRow(new string[] {
                            "hrn:hrs:lists:agrmt-types/MTA",
                            "hrn:hrs:lists:agrmt-mta-direction-mt/outgoing",
                            "hrn:hrs:lists:agrmt-mta-origin/internal-tp",
                            "MTA00001",
                            "MTA00021",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/cis-aerdcrt.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/sowagreement1.pdf",
                            "true",
                            "hrn:hrs:lists:countries/italy",
                            "hrn:hrs:lists:countries/croatia",
                            "true",
                            "0.099",
                            "true",
                            "hrn:hrs:persons:301"});
#line 101
    testRunner.And("I update payload of Agreements for patch request", ((string)(null)), table39, "And ");
#line hidden
#line 104
  testRunner.When("I perform Patch request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 105
    testRunner.Then("I validate status code for Patch request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 106
       testRunner.And("I Validate \"agreementType/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
      testRunner.And("I Validate \"agreementTypeData/directionMaterialTransfer/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
      testRunner.And("I Validate \"agreementTypeData/origin/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
      testRunner.And("I Validate \"agreementTypeData/fundingProjects/0/id\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 110
      testRunner.And("I Validate \"agreementTypeData/isExportingOutsideUsa\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
      testRunner.And("I Validate \"agreementTypeData/exportingCountries/1/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
      testRunner.And("I Validate \"agreementTypeData/isReimbursable\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
      testRunner.And("I Validate \"agreementTypeData/isSubjectToPatent\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_004_07_ValidateAgreementsAPI_MTA-Outgoing_Origin_GeneratedInternally_PostRequ" +
            "est")]
        public virtual void AGR_004_07_ValidateAgreementsAPI_MTA_Outgoing_Origin_GeneratedInternally_PostRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_004_07_ValidateAgreementsAPI_MTA-Outgoing_Origin_GeneratedInternally_PostRequ" +
                    "est", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 117
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 118
  testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 119
        testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 120
        testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "title",
                            "firstDraftTobeGeneratedInternally",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "otherPersonnel/0/hrn",
                            "otherPersonnel/1/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/directionMaterialTransfer/hrn",
                            "agreementTypeData/origin/hrn",
                            "agreementTypeData/fundingProjectDocuments/0/url",
                            "agreementTypeData/sowDocuments/0/url",
                            "agreementTypeData/sowDescription",
                            "agreementTypeData/isExportingOutsideUsa",
                            "agreementTypeData/exportingCountries/0/hrn",
                            "agreementTypeData/exportingCountries/1/hrn",
                            "agreementTypeData/isReimbursable",
                            "agreementTypeData/reimbursementAmount",
                            "agreementTypeData/isSubjectToPatent",
                            "agreementTypeData/pocTechTransfer/hrn",
                            "agreementTypeData/originOther",
                            "agreementTypeData/fundingProjects"});
                table40.AddRow(new string[] {
                            "QA_Title_DateStamp",
                            "true",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/MTA",
                            "hrn:hrs:lists:agrmt-mta-direction-mt/outgoing",
                            "hrn:hrs:lists:agrmt-mta-origin/internal",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/cis-aerdcrt.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/sowagreement1.pdf",
                            "The recipient will trace the site of DNA replication in live cells.",
                            "true",
                            "hrn:hrs:lists:countries/italy",
                            "hrn:hrs:lists:countries/croatia",
                            "true",
                            "0.099",
                            "true",
                            "hrn:hrs:persons:301",
                            "null",
                            "null"});
#line 121
        testRunner.When("I generate payload of Agreements for Post request for MTA-Outgoing API", ((string)(null)), table40, "When ");
#line hidden
#line 124
         testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 125
        testRunner.Then("I Validate new record after post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 126
        testRunner.Then("I perform Get request and verify the resource created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_004_08_ValidateAgreementsAPI_MTA-Outgoing_Origin_GeneratedInternally_PutReque" +
            "st")]
        public virtual void AGR_004_08_ValidateAgreementsAPI_MTA_Outgoing_Origin_GeneratedInternally_PutRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_004_08_ValidateAgreementsAPI_MTA-Outgoing_Origin_GeneratedInternally_PutReque" +
                    "st", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 132
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 133
  testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 134
     testRunner.Then("I retrieve data using unique key received after successful Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementType/hrn",
                            "agreementTypeData/directionMaterialTransfer/hrn",
                            "agreementTypeData/origin/hrn",
                            "agreementTypeData/fundingProjectDocuments/0/url",
                            "agreementTypeData/sowDocuments/0/url",
                            "agreementTypeData/sowDescription",
                            "agreementTypeData/isExportingOutsideUsa",
                            "agreementTypeData/exportingCountries/0/hrn",
                            "agreementTypeData/exportingCountries/1/hrn",
                            "agreementTypeData/isReimbursable",
                            "agreementTypeData/reimbursementAmount",
                            "agreementTypeData/isSubjectToPatent",
                            "agreementTypeData/pocTechTransfer/hrn"});
                table41.AddRow(new string[] {
                            "hrn:hrs:lists:agrmt-types/MTA",
                            "hrn:hrs:lists:agrmt-mta-direction-mt/outgoing",
                            "hrn:hrs:lists:agrmt-mta-origin/internal",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/cis-aerdcrt.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/sowagreement1.pdf",
                            "The recipient will trace the site of DNA replication in live cells.",
                            "true",
                            "hrn:hrs:lists:countries/italy",
                            "hrn:hrs:lists:countries/croatia",
                            "true",
                            "0.099",
                            "true",
                            "hrn:hrs:persons:301"});
#line 135
      testRunner.When("I update payload of Agreements for put request", ((string)(null)), table41, "When ");
#line hidden
#line 138
 testRunner.When("I perform Put request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 139
    testRunner.Then("I validate status code for Put requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 140
      testRunner.And("I Validate \"agreementType/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
      testRunner.And("I Validate \"agreementTypeData/directionMaterialTransfer/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 142
      testRunner.And("I Validate \"agreementTypeData/origin/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
      testRunner.And("I Validate \"agreementTypeData/isExportingOutsideUsa\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 144
      testRunner.And("I Validate \"agreementTypeData/exportingCountries/1/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
      testRunner.And("I Validate \"agreementTypeData/isReimbursable\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
      testRunner.And("I Validate \"agreementTypeData/isSubjectToPatent\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_004_09_ValidateAgreementsAPI_MTA-Outgoing_Origin_GeneratedInternally_PatchReq" +
            "uest")]
        public virtual void AGR_004_09_ValidateAgreementsAPI_MTA_Outgoing_Origin_GeneratedInternally_PatchRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_004_09_ValidateAgreementsAPI_MTA-Outgoing_Origin_GeneratedInternally_PatchReq" +
                    "uest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 149
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 151
   testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 152
   testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 153
        testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "hrn"});
                table42.AddRow(new string[] {
                            "hrn:hrs:agreements:742"});
#line 154
    testRunner.When("I retrieve data using unique key by Get Request for Agreements", ((string)(null)), table42, "When ");
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementType/hrn",
                            "agreementTypeData/directionMaterialTransfer/hrn",
                            "agreementTypeData/origin/hrn",
                            "agreementTypeData/fundingProjectDocuments/0/url",
                            "agreementTypeData/sowDocuments/0/url",
                            "agreementTypeData/sowDescription",
                            "agreementTypeData/isExportingOutsideUsa",
                            "agreementTypeData/exportingCountries/0/hrn",
                            "agreementTypeData/exportingCountries/1/hrn",
                            "agreementTypeData/isReimbursable",
                            "agreementTypeData/reimbursementAmount",
                            "agreementTypeData/isSubjectToPatent",
                            "agreementTypeData/pocTechTransfer/hrn",
                            "agreementTypeData/fundingProjects"});
                table43.AddRow(new string[] {
                            "hrn:hrs:lists:agrmt-types/MTA",
                            "hrn:hrs:lists:agrmt-mta-direction-mt/outgoing",
                            "hrn:hrs:lists:agrmt-mta-origin/internal",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/cis-aerdcrt.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/sowagreement1.pdf",
                            "The recipient will trace the site of DNA replication in live cells.",
                            "true",
                            "hrn:hrs:lists:countries/italy",
                            "hrn:hrs:lists:countries/croatia",
                            "true",
                            "0.099",
                            "true",
                            "hrn:hrs:persons:301",
                            "null"});
#line 157
    testRunner.And("I update payload of Agreements for patch request", ((string)(null)), table43, "And ");
#line hidden
#line 160
  testRunner.When("I perform Patch request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 161
    testRunner.Then("I validate status code for Patch request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 162
       testRunner.And("I Validate \"agreementType/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 163
      testRunner.And("I Validate \"agreementTypeData/directionMaterialTransfer/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 164
      testRunner.And("I Validate \"agreementTypeData/origin/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 165
      testRunner.And("I Validate \"agreementTypeData/isExportingOutsideUsa\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 166
      testRunner.And("I Validate \"agreementTypeData/exportingCountries/1/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 167
      testRunner.And("I Validate \"agreementTypeData/isReimbursable\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 168
      testRunner.And("I Validate \"agreementTypeData/isSubjectToPatent\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_004_10_ValidateAgreementsAPI_MTA-Outgoing_Origin_Other_PostRequest")]
        public virtual void AGR_004_10_ValidateAgreementsAPI_MTA_Outgoing_Origin_Other_PostRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_004_10_ValidateAgreementsAPI_MTA-Outgoing_Origin_Other_PostRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 172
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 173
  testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 174
        testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 175
        testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "title",
                            "firstDraftTobeGeneratedInternally",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "otherPersonnel/0/hrn",
                            "otherPersonnel/1/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/directionMaterialTransfer/hrn",
                            "agreementTypeData/origin/hrn",
                            "agreementTypeData/originOther",
                            "agreementTypeData/fundingProjectDocuments/0/url",
                            "agreementTypeData/sowDocuments/0/url",
                            "agreementTypeData/sowDescription",
                            "agreementTypeData/isExportingOutsideUsa",
                            "agreementTypeData/exportingCountries/0/hrn",
                            "agreementTypeData/exportingCountries/1/hrn",
                            "agreementTypeData/isReimbursable",
                            "agreementTypeData/reimbursementAmount",
                            "agreementTypeData/isSubjectToPatent",
                            "agreementTypeData/pocTechTransfer/hrn",
                            "agreementTypeData/fundingProjects"});
                table44.AddRow(new string[] {
                            "QA_Title_DateStamp",
                            "true",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/MTA",
                            "hrn:hrs:lists:agrmt-mta-direction-mt/outgoing",
                            "hrn:hrs:lists:agrmt-mta-origin/other",
                            "This is a modification of HCT116 cell line which was purchased from ATCC",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/cis-aerdcrt.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/sowagreement1.pdf",
                            "The recipient will trace the site of DNA replication in live cells.",
                            "true",
                            "hrn:hrs:lists:countries/italy",
                            "hrn:hrs:lists:countries/croatia",
                            "true",
                            "0.099",
                            "true",
                            "hrn:hrs:persons:301",
                            "null"});
#line 176
        testRunner.When("I generate payload of Agreements for Post request for MTA-Outgoing API", ((string)(null)), table44, "When ");
#line hidden
#line 179
         testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 180
        testRunner.Then("I Validate new record after post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 181
        testRunner.Then("I perform Get request and verify the resource created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_004_11_ValidateAgreementsAPI_MTA-Outgoing_Origin_Other_PutRequest")]
        public virtual void AGR_004_11_ValidateAgreementsAPI_MTA_Outgoing_Origin_Other_PutRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_004_11_ValidateAgreementsAPI_MTA-Outgoing_Origin_Other_PutRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 185
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 186
  testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 187
     testRunner.Then("I retrieve data using unique key received after successful Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementType/hrn",
                            "agreementTypeData/directionMaterialTransfer/hrn",
                            "agreementTypeData/origin/hrn",
                            "agreementTypeData/originOther",
                            "agreementTypeData/fundingProjectDocuments/0/url",
                            "agreementTypeData/sowDocuments/0/url",
                            "agreementTypeData/sowDescription",
                            "agreementTypeData/isExportingOutsideUsa",
                            "agreementTypeData/exportingCountries/0/hrn",
                            "agreementTypeData/exportingCountries/1/hrn",
                            "agreementTypeData/isReimbursable",
                            "agreementTypeData/reimbursementAmount",
                            "agreementTypeData/isSubjectToPatent",
                            "agreementTypeData/pocTechTransfer/hrn"});
                table45.AddRow(new string[] {
                            "hrn:hrs:lists:agrmt-types/MTA",
                            "hrn:hrs:lists:agrmt-mta-direction-mt/outgoing",
                            "hrn:hrs:lists:agrmt-mta-origin/other",
                            "This is a modification of HCT116 cell line which was purchased from ATCC",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/cis-aerdcrt.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/sowagreement1.pdf",
                            "The recipient will trace the site of DNA replication in live cells.",
                            "true",
                            "hrn:hrs:lists:countries/italy",
                            "hrn:hrs:lists:countries/croatia",
                            "true",
                            "0.099",
                            "true",
                            "hrn:hrs:persons:301"});
#line 188
      testRunner.When("I update payload of Agreements for put request", ((string)(null)), table45, "When ");
#line hidden
#line 191
 testRunner.When("I perform Put request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 192
    testRunner.Then("I validate status code for Put requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 193
      testRunner.And("I Validate \"agreementType/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 194
      testRunner.And("I Validate \"agreementTypeData/directionMaterialTransfer/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 195
      testRunner.And("I Validate \"agreementTypeData/origin/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 196
      testRunner.And("I Validate \"agreementTypeData/isExportingOutsideUsa\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 197
      testRunner.And("I Validate \"agreementTypeData/exportingCountries/1/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 198
      testRunner.And("I Validate \"agreementTypeData/isReimbursable\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 199
      testRunner.And("I Validate \"agreementTypeData/isSubjectToPatent\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_004_12_ValidateAgreementsAPI_MTA-Outgoing_Origin_Other_PatchRequest")]
        public virtual void AGR_004_12_ValidateAgreementsAPI_MTA_Outgoing_Origin_Other_PatchRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_004_12_ValidateAgreementsAPI_MTA-Outgoing_Origin_Other_PatchRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 202
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 204
   testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 205
   testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 206
        testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                            "hrn"});
                table46.AddRow(new string[] {
                            "hrn:hrs:agreements:742"});
#line 207
    testRunner.When("I retrieve data using unique key by Get Request for Agreements", ((string)(null)), table46, "When ");
#line hidden
                TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementType/hrn",
                            "agreementTypeData/directionMaterialTransfer/hrn",
                            "agreementTypeData/origin/hrn",
                            "agreementTypeData/originOther",
                            "agreementTypeData/fundingProjectDocuments/0/url",
                            "agreementTypeData/sowDocuments/0/url",
                            "agreementTypeData/sowDescription",
                            "agreementTypeData/isExportingOutsideUsa",
                            "agreementTypeData/exportingCountries/0/hrn",
                            "agreementTypeData/exportingCountries/1/hrn",
                            "agreementTypeData/isReimbursable",
                            "agreementTypeData/reimbursementAmount",
                            "agreementTypeData/isSubjectToPatent",
                            "agreementTypeData/pocTechTransfer/hrn"});
                table47.AddRow(new string[] {
                            "hrn:hrs:lists:agrmt-types/MTA",
                            "hrn:hrs:lists:agrmt-mta-direction-mt/outgoing",
                            "hrn:hrs:lists:agrmt-mta-origin/other",
                            "This is a modification of HCT116 cell line which was purchased from ATCC",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/cis-aerdcrt.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/sowagreement1.pdf",
                            "The recipient will trace the site of DNA replication in live cells.",
                            "true",
                            "hrn:hrs:lists:countries/italy",
                            "hrn:hrs:lists:countries/croatia",
                            "true",
                            "0.099",
                            "true",
                            "hrn:hrs:persons:301"});
#line 210
   testRunner.When("I create payload for Patch request", ((string)(null)), table47, "When ");
#line hidden
#line 213
    testRunner.When("I perform Patch request for Agreements by using the new patch payload", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 214
    testRunner.Then("I validate status code for Patch request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 215
       testRunner.And("I Validate \"agreementType/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 216
      testRunner.And("I Validate \"agreementTypeData/directionMaterialTransfer/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 217
      testRunner.And("I Validate \"agreementTypeData/origin/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 218
      testRunner.And("I Validate \"agreementTypeData/isExportingOutsideUsa\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 219
      testRunner.And("I Validate \"agreementTypeData/exportingCountries/1/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 220
      testRunner.And("I Validate \"agreementTypeData/isReimbursable\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 221
      testRunner.And("I Validate \"agreementTypeData/isSubjectToPatent\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_004_13_ErrorMessageValidation_MTA-Outgoing-API")]
        public virtual void AGR_004_13_ErrorMessageValidation_MTA_Outgoing_API()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_004_13_ErrorMessageValidation_MTA-Outgoing-API", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 225
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 227
         testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 228
        testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 229
        testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/directionMaterialTransfer/hrn",
                            "agreementTypeData/origin/hrn",
                            "agreementTypeData/fundingProjects/0/id",
                            "agreementTypeData/fundingProjects/1/id",
                            "agreementTypeData/fundingProjectDocuments/0/url",
                            "agreementTypeData/sowDocuments/0/url",
                            "agreementTypeData/isExportingOutsideUsa",
                            "agreementTypeData/exportingCountries/0/hrn",
                            "agreementTypeData/exportingCountries/1/hrn",
                            "agreementTypeData/isReimbursable",
                            "agreementTypeData/reimbursementAmount",
                            "agreementTypeData/isSubjectToPatent",
                            "agreementTypeData/pocTechTransfer/hrn",
                            "agreementTypeData/originOther"});
                table48.AddRow(new string[] {
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/MTA",
                            "hrn:hrs:lists:agrmt-mta-direction-mt/outgoing",
                            "hrn:hrs:lists:agrmt-mta-origin/third-party",
                            "MTA00001",
                            "MTA00021",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/cis-aerdcrt.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/sowagreement1.pdf",
                            "false",
                            "hrn:hrs:lists:countries/italy",
                            "hrn:hrs:lists:countries/croatia",
                            "true",
                            "0.099",
                            "true",
                            "hrn:hrs:persons:301",
                            "null"});
#line 230
         testRunner.When("I generate payload of Agreements for Post request for MTA-Outgoing API", ((string)(null)), table48, "When ");
#line hidden
#line 233
        testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 234
        testRunner.Then("I Validate the error message for invalid  field exportingCountries when isExporti" +
                        "ngOutsideUsa field is marked false if directionMaterialTransfer is Outgoing  in " +
                        "post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 235
        testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                            "title",
                            "firstDraftTobeGeneratedInternally",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "otherPersonnel/0/hrn",
                            "otherPersonnel/1/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/directionMaterialTransfer/hrn",
                            "agreementTypeData/origin/hrn",
                            "agreementTypeData/fundingProjects/0/id",
                            "agreementTypeData/fundingProjects/1/id",
                            "agreementTypeData/fundingProjectDocuments/0/url",
                            "agreementTypeData/sowDocuments/0/url",
                            "agreementTypeData/isExportingOutsideUsa",
                            "agreementTypeData/exportingCountries/0/hrn",
                            "agreementTypeData/exportingCountries/1/hrn",
                            "agreementTypeData/isReimbursable",
                            "agreementTypeData/reimbursementAmount",
                            "agreementTypeData/isSubjectToPatent",
                            "agreementTypeData/pocTechTransfer/hrn",
                            "agreementTypeData/originOther"});
                table49.AddRow(new string[] {
                            "QA_Title_DateStamp",
                            "true",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/MTA",
                            "hrn:hrs:lists:agrmt-mta-direction-mt/outgoing",
                            "hrn:hrs:lists:agrmt-mta-origin/internal-tp",
                            "MTA00001",
                            "MTA00021",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/cis-aerdcrt.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/sowagreement1.pdf",
                            "true",
                            "hrn:hrs:lists:countries/italy",
                            "hrn:hrs:lists:countries/croatia",
                            "false",
                            "0.099",
                            "true",
                            "hrn:hrs:persons:301",
                            "null"});
#line 238
        testRunner.When("I generate payload of Agreements for Post request for MTA-Outgoing API", ((string)(null)), table49, "When ");
#line hidden
#line 241
        testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 242
        testRunner.Then("I Validate the error message for invalid  field reimbursementAmount when isReimbu" +
                        "rsable field is marked false if directionMaterialTransfer is Outgoing  in post r" +
                        "equest", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 243
        testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                            "title",
                            "firstDraftTobeGeneratedInternally",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "otherPersonnel/0/hrn",
                            "otherPersonnel/1/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/directionMaterialTransfer/hrn",
                            "agreementTypeData/origin/hrn",
                            "agreementTypeData/fundingProjectDocuments/0/url",
                            "agreementTypeData/sowDocuments/0/url",
                            "agreementTypeData/sowDescription",
                            "agreementTypeData/isExportingOutsideUsa",
                            "agreementTypeData/exportingCountries/0/hrn",
                            "agreementTypeData/exportingCountries/1/hrn",
                            "agreementTypeData/isReimbursable",
                            "agreementTypeData/reimbursementAmount",
                            "agreementTypeData/isSubjectToPatent",
                            "agreementTypeData/pocTechTransfer/hrn",
                            "agreementTypeData/originOther",
                            "agreementTypeData/fundingProjects"});
                table50.AddRow(new string[] {
                            "QA_Title_DateStamp",
                            "true",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/MTA",
                            "hrn:hrs:lists:agrmt-mta-direction-mt/outgoing",
                            "hrn:hrs:lists:agrmt-mta-origin/internal",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/cis-aerdcrt.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/sowagreement1.pdf",
                            "The recipient will trace the site of DNA replication in live cells.",
                            "true",
                            "hrn:hrs:lists:countries/italy",
                            "hrn:hrs:lists:countries/croatia",
                            "true",
                            "0.099",
                            "false",
                            "hrn:hrs:persons:301",
                            "null",
                            "null"});
#line 246
         testRunner.When("I generate payload of Agreements for Post request for MTA-Outgoing API", ((string)(null)), table50, "When ");
#line hidden
#line 249
         testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 250
       testRunner.Then("I Validate the error message for invalid  field pocTechTransfer when isSubjectToP" +
                        "atent field is marked false if directionMaterialTransfer is Outgoing  in post re" +
                        "quest for MTA API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 251
        testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/directionMaterialTransfer/hrn",
                            "agreementTypeData/origin/hrn",
                            "agreementTypeData/fundingProjects/0/id",
                            "agreementTypeData/fundingProjects/1/id",
                            "agreementTypeData/fundingProjectDocuments/0/url",
                            "agreementTypeData/sowDocuments/0/url",
                            "agreementTypeData/isExportingOutsideUsa",
                            "agreementTypeData/exportingCountries/0/hrn",
                            "agreementTypeData/exportingCountries/1/hrn",
                            "agreementTypeData/isReimbursable",
                            "agreementTypeData/reimbursementAmount",
                            "agreementTypeData/isSubjectToPatent",
                            "agreementTypeData/pocTechTransfer/hrn",
                            "agreementTypeData/originOther"});
                table51.AddRow(new string[] {
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/MTA",
                            "hrn:hrs:lists:agrmt-mta-direction-mt/outgoing",
                            "hrn:hrs:lists:agrmt-mta-origin/third-party",
                            "MTA00001",
                            "MTA00021",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/cis-aerdcrt.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/sowagreement1.pdf",
                            "true",
                            "hrn:hrs:lists:countries/italy",
                            "hrn:hrs:lists:countries/croatia",
                            "true",
                            "0.099",
                            "true",
                            "hrn:hrs:persons:301",
                            "This is a modification of HCT116 cell line which was purchased from ATCC"});
#line 254
         testRunner.When("I generate payload of Agreements for Post request for MTA-Outgoing API", ((string)(null)), table51, "When ");
#line hidden
#line 257
         testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 258
       testRunner.Then("I Validate the error message for invalid field originOther when origin field cont" +
                        "ains hrn corresponding to  Purchasedorprovidedbythirdparty radio button  if dire" +
                        "ctionMaterialTransfer is Outgoing  in post request for MTA API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 259
        testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                            "title",
                            "firstDraftTobeGeneratedInternally",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "otherPersonnel/0/hrn",
                            "otherPersonnel/1/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/directionMaterialTransfer/hrn",
                            "agreementTypeData/origin/hrn",
                            "agreementTypeData/fundingProjects/0/id",
                            "agreementTypeData/fundingProjects/1/id",
                            "agreementTypeData/fundingProjectDocuments/0/url",
                            "agreementTypeData/sowDocuments/0/url",
                            "agreementTypeData/isExportingOutsideUsa",
                            "agreementTypeData/exportingCountries/0/hrn",
                            "agreementTypeData/exportingCountries/1/hrn",
                            "agreementTypeData/isReimbursable",
                            "agreementTypeData/reimbursementAmount",
                            "agreementTypeData/isSubjectToPatent",
                            "agreementTypeData/pocTechTransfer/hrn",
                            "agreementTypeData/originOther"});
                table52.AddRow(new string[] {
                            "QA_Title_DateStamp",
                            "true",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/MTA",
                            "hrn:hrs:lists:agrmt-mta-direction-mt/outgoing",
                            "hrn:hrs:lists:agrmt-mta-origin/internal-tp",
                            "MTA00001",
                            "MTA00021",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/cis-aerdcrt.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/sowagreement1.pdf",
                            "true",
                            "hrn:hrs:lists:countries/italy",
                            "hrn:hrs:lists:countries/croatia",
                            "true",
                            "0.099",
                            "true",
                            "hrn:hrs:persons:301",
                            "This is a modification of HCT116 cell line which was purchased from ATCC"});
#line 262
         testRunner.When("I generate payload of Agreements for Post request for MTA-Outgoing API", ((string)(null)), table52, "When ");
#line hidden
#line 265
         testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 266
       testRunner.Then("I Validate the error message for invalid  field originOther when origin field con" +
                        "tains hrn corresponding to GeneratedInternallybythirdparty radio button if direc" +
                        "tionMaterialTransfer is Outgoing in post request for MTA API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 267
        testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                            "title",
                            "firstDraftTobeGeneratedInternally",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "otherPersonnel/0/hrn",
                            "otherPersonnel/1/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/directionMaterialTransfer/hrn",
                            "agreementTypeData/origin/hrn",
                            "agreementTypeData/fundingProjectDocuments/0/url",
                            "agreementTypeData/sowDocuments/0/url",
                            "agreementTypeData/sowDescription",
                            "agreementTypeData/isExportingOutsideUsa",
                            "agreementTypeData/exportingCountries/0/hrn",
                            "agreementTypeData/exportingCountries/1/hrn",
                            "agreementTypeData/isReimbursable",
                            "agreementTypeData/reimbursementAmount",
                            "agreementTypeData/isSubjectToPatent",
                            "agreementTypeData/pocTechTransfer/hrn",
                            "agreementTypeData/originOther",
                            "agreementTypeData/fundingProjects"});
                table53.AddRow(new string[] {
                            "QA_Title_DateStamp",
                            "true",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/MTA",
                            "hrn:hrs:lists:agrmt-mta-direction-mt/outgoing",
                            "hrn:hrs:lists:agrmt-mta-origin/internal",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/cis-aerdcrt.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/sowagreement1.pdf",
                            "The recipient will trace the site of DNA replication in live cells.",
                            "true",
                            "hrn:hrs:lists:countries/italy",
                            "hrn:hrs:lists:countries/croatia",
                            "true",
                            "0.099",
                            "true",
                            "hrn:hrs:persons:301",
                            "This is a modification of HCT116 cell line which was purchased from ATCC",
                            "null"});
#line 270
         testRunner.When("I generate payload of Agreements for Post request for MTA-Outgoing API", ((string)(null)), table53, "When ");
#line hidden
#line 273
         testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 274
       testRunner.Then("I Validate the error message for invalid  field originOther  when origin field co" +
                        "ntains hrn corresponding to GeneratedInternally radio button if directionMateria" +
                        "lTransfer is Outgoing  in post request for MTA API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 275
        testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "title",
                            "firstDraftTobeGeneratedInternally",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "otherPersonnel/0/hrn",
                            "otherPersonnel/1/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/directionMaterialTransfer/hrn",
                            "agreementTypeData/origin/hrn",
                            "agreementTypeData/fundingProjectDocuments/0/url",
                            "agreementTypeData/sowDocuments/0/url",
                            "agreementTypeData/sowDescription",
                            "agreementTypeData/isExportingOutsideUsa",
                            "agreementTypeData/exportingCountries/0/hrn",
                            "agreementTypeData/exportingCountries/1/hrn",
                            "agreementTypeData/isReimbursable",
                            "agreementTypeData/reimbursementAmount",
                            "agreementTypeData/isSubjectToPatent",
                            "agreementTypeData/pocTechTransfer/hrn",
                            "agreementTypeData/originOther",
                            "agreementTypeData/fundingProjects/0/id",
                            "agreementTypeData/fundingProjects/1/id"});
                table54.AddRow(new string[] {
                            "QA_Title_DateStamp",
                            "true",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/MTA",
                            "hrn:hrs:lists:agrmt-mta-direction-mt/outgoing",
                            "hrn:hrs:lists:agrmt-mta-origin/internal",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/cis-aerdcrt.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/sowagreement1.pdf",
                            "The recipient will trace the site of DNA replication in live cells.",
                            "true",
                            "hrn:hrs:lists:countries/italy",
                            "hrn:hrs:lists:countries/croatia",
                            "true",
                            "0.099",
                            "true",
                            "hrn:hrs:persons:301",
                            "This is a modification of HCT116 cell line which was purchased from ATCC",
                            "MTA00234",
                            "MTA0023422"});
#line 278
         testRunner.When("I generate payload of Agreements for Post request for MTA-Outgoing API", ((string)(null)), table54, "When ");
#line hidden
#line 281
         testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 282
         testRunner.Then("I Validate the error message for invalid fundingProjects field when origin field " +
                        "contains hrn corresponding to GeneratedInternally radio button if directionMater" +
                        "ialTransfer is Outgoing  in post request for MTA API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 283
        testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                            "title",
                            "firstDraftTobeGeneratedInternally",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "otherPersonnel/0/hrn",
                            "otherPersonnel/1/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/directionMaterialTransfer/hrn",
                            "agreementTypeData/origin/hrn",
                            "agreementTypeData/originOther",
                            "agreementTypeData/fundingProjectDocuments/0/url",
                            "agreementTypeData/sowDocuments/0/url",
                            "agreementTypeData/sowDescription",
                            "agreementTypeData/isExportingOutsideUsa",
                            "agreementTypeData/exportingCountries/0/hrn",
                            "agreementTypeData/exportingCountries/1/hrn",
                            "agreementTypeData/isReimbursable",
                            "agreementTypeData/reimbursementAmount",
                            "agreementTypeData/isSubjectToPatent",
                            "agreementTypeData/pocTechTransfer/hrn",
                            "agreementTypeData/fundingProjects/0/id",
                            "agreementTypeData/fundingProjects/1/id"});
                table55.AddRow(new string[] {
                            "QA_Title_DateStamp",
                            "true",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/MTA",
                            "hrn:hrs:lists:agrmt-mta-direction-mt/outgoing",
                            "hrn:hrs:lists:agrmt-mta-origin/other",
                            "This is a modification of HCT116 cell line which was purchased from ATCC",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/cis-aerdcrt.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/sowagreement1.pdf",
                            "The recipient will trace the site of DNA replication in live cells.",
                            "true",
                            "hrn:hrs:lists:countries/italy",
                            "hrn:hrs:lists:countries/croatia",
                            "true",
                            "0.099",
                            "true",
                            "hrn:hrs:persons:301",
                            "MTA00234",
                            "MTA0023422"});
#line 287
         testRunner.When("I generate payload of Agreements for Post request for MTA-Outgoing API", ((string)(null)), table55, "When ");
#line hidden
#line 290
         testRunner.Then("I Validate the error message for invalid fundingProjects field when origin field " +
                        "contains hrn corresponding to Other radio button if directionMaterialTransfer is" +
                        " Outgoing  in post request for MTA API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 291
         testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
