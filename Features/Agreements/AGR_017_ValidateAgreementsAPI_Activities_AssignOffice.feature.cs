// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HeartTest.Features.Agreements
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AGR_017_ValidateAgreementsAPI_Activities_AssignOffice")]
    [NUnit.Framework.CategoryAttribute("Smoke")]
    [NUnit.Framework.CategoryAttribute("agreements")]
    public partial class AGR_017_ValidateAgreementsAPI_Activities_AssignOfficeFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Smoke",
                "agreements"};
        
#line 1 "AGR_017_ValidateAgreementsAPI_Activities_AssignOffice.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Agreements", "AGR_017_ValidateAgreementsAPI_Activities_AssignOffice", "Description: Validate different activities api for Agreements", ProgrammingLanguage.CSharp, new string[] {
                        "Smoke",
                        "agreements"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_017_01_ValidateAgreementsActivitiesAPI_AssignOffice_CreateAgreement")]
        public virtual void AGR_017_01_ValidateAgreementsActivitiesAPI_AssignOffice_CreateAgreement()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_017_01_ValidateAgreementsActivitiesAPI_AssignOffice_CreateAgreement", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
        testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
        testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table142 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/purposeOfInformationExchange/hrn",
                            "agreementTypeData/purposeOfInformationExchangeOther",
                            "agreementTypeData/directionOfInformationTransfer/hrn",
                            "agreementTypeData/descriptionOfConfidentialInformation"});
                table142.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA",
                            "hrn:hrs:lists:agrmt-cda-purp-info-ex/other",
                            "Test Other Data with Post",
                            "hrn:hrs:lists:agrmt-cda-dir-info-tra/mutual",
                            "test"});
#line 12
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table142, "When ");
#line hidden
#line 15
       testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
       testRunner.Then("I perform Get request and verify the resource created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
        testRunner.And("I perform Get Request and Validate value of \"activityState\" attribute is \"PreSubm" +
                        "ission\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_017_02_ValidateAgreementsActivitiesAPI_AssignOffice_PreSubmission")]
        public virtual void AGR_017_02_ValidateAgreementsActivitiesAPI_AssignOffice_PreSubmission()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_017_02_ValidateAgreementsActivitiesAPI_AssignOffice_PreSubmission", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOffic" +
                        "e\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 25
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Assigne" +
                        "dOffice\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_017_03_ValidateAgreementsActivitiesAPI_AssignOffice_Unassigned")]
        public virtual void AGR_017_03_ValidateAgreementsActivitiesAPI_AssignOffice_Unassigned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_017_03_ValidateAgreementsActivitiesAPI_AssignOffice_Unassigned", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
        testRunner.Given("I execute \"Submit\" activity using Post request and activity state is updated to \"" +
                        "Unassigned\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 33
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 35
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Unassig" +
                        "ned\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table143 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table143.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 40
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table143, "When ");
#line hidden
#line 43
         testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 44
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 45
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Interna" +
                        "lReview\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_017_04_ValidateAgreementsActivitiesAPI_AssignOffice_InternalReview")]
        public virtual void AGR_017_04_ValidateAgreementsActivitiesAPI_AssignOffice_InternalReview()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_017_04_ValidateAgreementsActivitiesAPI_AssignOffice_InternalReview", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 50
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table144 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table144.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 51
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table144, "When ");
#line hidden
#line 54
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 58
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 60
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Unassig" +
                        "ned\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_017_05_ValidateAgreementsActivitiesAPI_AssignOffice_ExternalReview")]
        public virtual void AGR_017_05_ValidateAgreementsActivitiesAPI_AssignOffice_ExternalReview()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_017_05_ValidateAgreementsActivitiesAPI_AssignOffice_ExternalReview", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 63
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 65
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table145 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table145.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 66
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table145, "When ");
#line hidden
#line 69
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 71
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/MoveToExter" +
                        "nalReview\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table146 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url"});
                table146.AddRow(new string[] {
                            "test",
                            "doc.url"});
#line 72
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table146, "When ");
#line hidden
#line 75
       testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 77
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table147 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table147.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 78
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table147, "When ");
#line hidden
#line 81
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 82
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 83
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Externa" +
                        "lReview\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 87
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 88
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 89
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 90
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Unassig" +
                        "ned\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_017_06_ValidateAgreementsActivitiesAPI_AssignOffice_PIConcurrenceRequested")]
        public virtual void AGR_017_06_ValidateAgreementsActivitiesAPI_AssignOffice_PIConcurrenceRequested()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_017_06_ValidateAgreementsActivitiesAPI_AssignOffice_PIConcurrenceRequested", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 93
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 96
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/RequestPICo" +
                        "ncurrence\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table148 = new TechTalk.SpecFlow.Table(new string[] {
                            "commentsConcurrenceRequest"});
                table148.AddRow(new string[] {
                            "test"});
#line 97
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table148, "When ");
#line hidden
#line 100
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 104
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table149 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table149.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 105
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table149, "When ");
#line hidden
#line 108
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 109
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 110
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"PIConcu" +
                        "rrenceRequested\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 113
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 114
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 115
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 116
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Unassig" +
                        "ned\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_017_07_ValidateAgreementsActivitiesAPI_AssignOffice_ClarificationRequested")]
        public virtual void AGR_017_07_ValidateAgreementsActivitiesAPI_AssignOffice_ClarificationRequested()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_017_07_ValidateAgreementsActivitiesAPI_AssignOffice_ClarificationRequested", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 119
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 121
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/RequestClar" +
                        "ification\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table150 = new TechTalk.SpecFlow.Table(new string[] {
                            "commentsClarificationRequest"});
                table150.AddRow(new string[] {
                            "Test comments Clarification Request"});
#line 122
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table150, "When ");
#line hidden
#line 125
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 129
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table151 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table151.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 130
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table151, "When ");
#line hidden
#line 133
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 134
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 135
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Clarifi" +
                        "cationRequested\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 138
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 139
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 140
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 141
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Unassig" +
                        "ned\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_017_08_ValidateAgreementsActivitiesAPI_AssignOffice_ReadyForSignature")]
        public virtual void AGR_017_08_ValidateAgreementsActivitiesAPI_AssignOffice_ReadyForSignature()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_017_08_ValidateAgreementsActivitiesAPI_AssignOffice_ReadyForSignature", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 144
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 146
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table152 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table152.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 147
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table152, "When ");
#line hidden
#line 150
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 153
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/FinalizeTer" +
                        "ms\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table153 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url"});
                table153.AddRow(new string[] {
                            "test",
                            "doc.url"});
#line 154
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table153, "When ");
#line hidden
#line 157
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 161
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table154 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table154.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 162
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table154, "When ");
#line hidden
#line 165
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 166
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 167
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"ReadyFo" +
                        "rSignature\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 170
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 171
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 172
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 173
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Unassig" +
                        "ned\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_017_09_ValidateAgreementsActivitiesAPI_AssignOffice_InternalSignature")]
        public virtual void AGR_017_09_ValidateAgreementsActivitiesAPI_AssignOffice_InternalSignature()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_017_09_ValidateAgreementsActivitiesAPI_AssignOffice_InternalSignature", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 176
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 178
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table155 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table155.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 179
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table155, "When ");
#line hidden
#line 182
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 185
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/FinalizeTer" +
                        "ms\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table156 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url"});
                table156.AddRow(new string[] {
                            "test",
                            "doc.url"});
#line 186
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table156, "When ");
#line hidden
#line 189
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 191
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/SendForSign" +
                        "atures\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table157 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url",
                            "signatureType/hrn",
                            "signatureTransition/hrn"});
                table157.AddRow(new string[] {
                            "test",
                            "doc.url",
                            "hrn:hrs:lists:activity-signature-types/institutional-esign",
                            "hrn:hrs:lists:activity-signature-transitions/internal-signature"});
#line 192
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table157, "When ");
#line hidden
#line 195
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 199
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table158 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table158.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 200
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table158, "When ");
#line hidden
#line 203
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 204
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 205
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Interna" +
                        "lSignature\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 208
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 209
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 210
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 211
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Unassig" +
                        "ned\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_017_10_ValidateAgreementsActivitiesAPI_AssignOffice_ExternalSignature")]
        public virtual void AGR_017_10_ValidateAgreementsActivitiesAPI_AssignOffice_ExternalSignature()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_017_10_ValidateAgreementsActivitiesAPI_AssignOffice_ExternalSignature", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 214
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 216
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table159 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table159.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 217
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table159, "When ");
#line hidden
#line 220
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 223
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/FinalizeTer" +
                        "ms\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table160 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url"});
                table160.AddRow(new string[] {
                            "test",
                            "doc.url"});
#line 224
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table160, "When ");
#line hidden
#line 227
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 229
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/SendForSign" +
                        "atures\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table161 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url",
                            "signatureType/hrn",
                            "signatureTransition/hrn"});
                table161.AddRow(new string[] {
                            "test",
                            "doc.url",
                            "hrn:hrs:lists:activity-signature-types/institutional-esign",
                            "hrn:hrs:lists:activity-signature-transitions/external-signature"});
#line 230
         testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table161, "When ");
#line hidden
#line 233
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 237
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table162 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table162.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 238
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table162, "When ");
#line hidden
#line 241
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 242
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 243
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Externa" +
                        "lSignature\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 246
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 247
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 248
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 249
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Unassig" +
                        "ned\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_017_11_ValidateAgreementsActivitiesAPI_AssignOffice_Active")]
        public virtual void AGR_017_11_ValidateAgreementsActivitiesAPI_AssignOffice_Active()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_017_11_ValidateAgreementsActivitiesAPI_AssignOffice_Active", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 252
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 254
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table163 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table163.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 255
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table163, "When ");
#line hidden
#line 258
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 261
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/FinalizeTer" +
                        "ms\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table164 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url"});
                table164.AddRow(new string[] {
                            "test",
                            "doc.url"});
#line 262
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table164, "When ");
#line hidden
#line 265
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 267
         testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/SendForSign" +
                        "atures\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table165 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url",
                            "signatureType/hrn",
                            "signatureTransition/hrn"});
                table165.AddRow(new string[] {
                            "test",
                            "doc.url",
                            "hrn:hrs:lists:activity-signature-types/institutional-esign",
                            "hrn:hrs:lists:activity-signature-transitions/external-signature"});
#line 268
         testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table165, "When ");
#line hidden
#line 271
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 273
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Activate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table166 = new TechTalk.SpecFlow.Table(new string[] {
                            "effectiveDate"});
                table166.AddRow(new string[] {
                            "2021-02-25"});
#line 274
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table166, "When ");
#line hidden
#line 277
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 281
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table167 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table167.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 282
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table167, "When ");
#line hidden
#line 285
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 286
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 287
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Active\"" +
                        " for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 291
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 292
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 293
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 294
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Unassig" +
                        "ned\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_017_12_ValidateAgreementsActivitiesAPI_AssignOffice_Discarded")]
        public virtual void AGR_017_12_ValidateAgreementsActivitiesAPI_AssignOffice_Discarded()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_017_12_ValidateAgreementsActivitiesAPI_AssignOffice_Discarded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 297
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 299
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Discard\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table168 = new TechTalk.SpecFlow.Table(new string[] {
                            "comments"});
                table168.AddRow(new string[] {
                            "Test"});
#line 300
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table168, "When ");
#line hidden
#line 303
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 305
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 306
        testRunner.Then("I verify \"AssignOwner\" activity is not allowed in \"Discarded\" state and validate " +
                        "the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 307
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 308
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Discard" +
                        "ed\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
