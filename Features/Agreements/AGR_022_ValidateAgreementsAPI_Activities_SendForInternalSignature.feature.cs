// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HeartTest.Features.Agreements
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AGR_022_ValidateAgreementsAPI_Activities_SendForInternalSignature")]
    [NUnit.Framework.CategoryAttribute("Smoke")]
    [NUnit.Framework.CategoryAttribute("agreements")]
    public partial class AGR_022_ValidateAgreementsAPI_Activities_SendForInternalSignatureFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Smoke",
                "agreements"};
        
#line 1 "AGR_022_ValidateAgreementsAPI_Activities_SendForInternalSignature.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Agreements", "AGR_022_ValidateAgreementsAPI_Activities_SendForInternalSignature", "Description: Validate different activities api for Agreements", ProgrammingLanguage.CSharp, new string[] {
                        "Smoke",
                        "agreements"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_022_01_ValidateAgreementsAPI_Activities_SendForInternalSignature_CreateAgreem" +
            "ent")]
        public virtual void AGR_022_01_ValidateAgreementsAPI_Activities_SendForInternalSignature_CreateAgreement()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_022_01_ValidateAgreementsAPI_Activities_SendForInternalSignature_CreateAgreem" +
                    "ent", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
        testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
        testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table243 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/purposeOfInformationExchange/hrn",
                            "agreementTypeData/purposeOfInformationExchangeOther",
                            "agreementTypeData/directionOfInformationTransfer/hrn",
                            "agreementTypeData/descriptionOfConfidentialInformation"});
                table243.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA",
                            "hrn:hrs:lists:agrmt-cda-purp-info-ex/other",
                            "Test Other Data with Post",
                            "hrn:hrs:lists:agrmt-cda-dir-info-tra/mutual",
                            "test"});
#line 12
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table243, "When ");
#line hidden
#line 15
       testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
       testRunner.Then("I perform Get request and verify the resource created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
        testRunner.And("I perform Get Request and Validate value of \"activityState\" attribute is \"PreSubm" +
                        "ission\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_022_02_ValidateAgreementsAPI_Activities_SendForInternalSignature_PreSubmissio" +
            "n")]
        public virtual void AGR_022_02_ValidateAgreementsAPI_Activities_SendForInternalSignature_PreSubmission()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_022_02_ValidateAgreementsAPI_Activities_SendForInternalSignature_PreSubmissio" +
                    "n", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Activate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
        testRunner.Then("I verify \"Activate\" activity is not allowed in \"PreSubmission\" state and validate" +
                        " the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 25
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"PreSubm" +
                        "ission\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_022_03_ValidateAgreementsAPI_Activities_SendForInternalSignature_Unassigned")]
        public virtual void AGR_022_03_ValidateAgreementsAPI_Activities_SendForInternalSignature_Unassigned()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_022_03_ValidateAgreementsAPI_Activities_SendForInternalSignature_Unassigned", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
        testRunner.Given("I execute \"Submit\" activity using Post request and activity state is updated to \"" +
                        "Unassigned\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 31
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Activate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
        testRunner.Then("I verify \"Activate\" activity is not allowed in \"Unassigned\" state and validate th" +
                        "e error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 34
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Unassig" +
                        "ned\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_022_04_ValidateAgreementsAPI_Activities_SendForInternalSignature_InternalRevi" +
            "ew")]
        public virtual void AGR_022_04_ValidateAgreementsAPI_Activities_SendForInternalSignature_InternalReview()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_022_04_ValidateAgreementsAPI_Activities_SendForInternalSignature_InternalRevi" +
                    "ew", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 39
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table244 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table244.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 40
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table244, "When ");
#line hidden
#line 43
         testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Activate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 46
        testRunner.Then("I verify \"Activate\" activity is not allowed in \"InternalReview\" state and validat" +
                        "e the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 47
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 48
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Interna" +
                        "lReview\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_022_05_ValidateAgreementsAPI_Activities_SendForInternalSignature_ExternalRevi" +
            "ew")]
        public virtual void AGR_022_05_ValidateAgreementsAPI_Activities_SendForInternalSignature_ExternalReview()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_022_05_ValidateAgreementsAPI_Activities_SendForInternalSignature_ExternalRevi" +
                    "ew", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 53
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/MoveToExter" +
                        "nalReview\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table245 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url"});
                table245.AddRow(new string[] {
                            "test",
                            "doc.url"});
#line 54
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table245, "When ");
#line hidden
#line 57
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Activate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 60
        testRunner.Then("I verify \"Activate\" activity is not allowed in \"InternalReview\" state and validat" +
                        "e the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 62
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Externa" +
                        "lReview\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_022_06_ValidateAgreementsAPI_Activities_SendForInternalSignature_PIConcurrenc" +
            "eRequested")]
        public virtual void AGR_022_06_ValidateAgreementsAPI_Activities_SendForInternalSignature_PIConcurrenceRequested()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_022_06_ValidateAgreementsAPI_Activities_SendForInternalSignature_PIConcurrenc" +
                    "eRequested", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 67
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 68
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 70
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/RequestPICo" +
                        "ncurrence\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table246 = new TechTalk.SpecFlow.Table(new string[] {
                            "commentsConcurrenceRequest"});
                table246.AddRow(new string[] {
                            "test"});
#line 71
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table246, "When ");
#line hidden
#line 74
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 76
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Activate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 77
        testRunner.Then("I verify \"Activate\" activity is not allowed in \"RequestPIConcurrence\" state and v" +
                        "alidate the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 78
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 79
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Request" +
                        "PIConcurrence\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_022_07_ValidateAgreementsAPI_Activities_SendForInternalSignature_Clarificatio" +
            "nRequested")]
        public virtual void AGR_022_07_ValidateAgreementsAPI_Activities_SendForInternalSignature_ClarificationRequested()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_022_07_ValidateAgreementsAPI_Activities_SendForInternalSignature_Clarificatio" +
                    "nRequested", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 82
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 84
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 85
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 87
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/RequestClar" +
                        "ification\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table247 = new TechTalk.SpecFlow.Table(new string[] {
                            "commentsClarificationRequest"});
                table247.AddRow(new string[] {
                            "Test comments Clarification Request"});
#line 88
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table247, "When ");
#line hidden
#line 91
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 93
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Activate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 94
        testRunner.Then("I verify \"Activate\" activity is not allowed in \"ClarificationRequested\" state and" +
                        " validate the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 95
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 96
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Clarifi" +
                        "cationRequested\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_022_08_ValidateAgreementsAPI_Activities_SendForInternalSignature_ReadyForSign" +
            "ature")]
        public virtual void AGR_022_08_ValidateAgreementsAPI_Activities_SendForInternalSignature_ReadyForSignature()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_022_08_ValidateAgreementsAPI_Activities_SendForInternalSignature_ReadyForSign" +
                    "ature", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 99
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 101
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 102
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 104
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table248 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table248.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 105
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table248, "When ");
#line hidden
#line 108
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 110
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/FinalizeTer" +
                        "ms\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table249 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url"});
                table249.AddRow(new string[] {
                            "test",
                            "doc.url"});
#line 111
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table249, "When ");
#line hidden
#line 114
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 116
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Activate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 117
        testRunner.Then("I verify \"Activate\" activity is not allowed in \"ReadyForSignature\" state and vali" +
                        "date the error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 118
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 119
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"ReadyFo" +
                        "rSignature\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_022_09_ValidateAgreementsAPI_Activities_SendForInternalSignature_InternalSign" +
            "ature")]
        public virtual void AGR_022_09_ValidateAgreementsAPI_Activities_SendForInternalSignature_InternalSignature()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_022_09_ValidateAgreementsAPI_Activities_SendForInternalSignature_InternalSign" +
                    "ature", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 122
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 124
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 125
        testRunner.When("I perform Post request without request body for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 127
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table250 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table250.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 128
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table250, "When ");
#line hidden
#line 131
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 133
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/FinalizeTer" +
                        "ms\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table251 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url"});
                table251.AddRow(new string[] {
                            "test",
                            "doc.url"});
#line 134
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table251, "When ");
#line hidden
#line 137
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 139
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/SendForSign" +
                        "atures\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table252 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url",
                            "signatureType/hrn",
                            "signatureTransition/hrn"});
                table252.AddRow(new string[] {
                            "test",
                            "doc.url",
                            "hrn:hrs:lists:activity-signature-types/institutional-esign",
                            "hrn:hrs:lists:activity-signature-transitions/internal-signature"});
#line 140
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table252, "When ");
#line hidden
#line 143
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 145
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Activate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table253 = new TechTalk.SpecFlow.Table(new string[] {
                            "effectiveDate",
                            "hasNoExpirationDate",
                            "expirationDate"});
                table253.AddRow(new string[] {
                            "DateStamp",
                            "false",
                            "DateStamp"});
#line 146
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table253, "When ");
#line hidden
#line 149
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 150
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 151
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Active\"" +
                        " for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_022_10_ValidateAgreementsAPI_Activities_SendForInternalSignature_ExternalSign" +
            "ature")]
        public virtual void AGR_022_10_ValidateAgreementsAPI_Activities_SendForInternalSignature_ExternalSignature()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_022_10_ValidateAgreementsAPI_Activities_SendForInternalSignature_ExternalSign" +
                    "ature", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 154
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 156
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table254 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/purposeOfInformationExchange/hrn",
                            "agreementTypeData/purposeOfInformationExchangeOther",
                            "agreementTypeData/directionOfInformationTransfer/hrn",
                            "agreementTypeData/descriptionOfConfidentialInformation"});
                table254.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA",
                            "hrn:hrs:lists:agrmt-cda-purp-info-ex/other",
                            "Test Other Data with Post",
                            "hrn:hrs:lists:agrmt-cda-dir-info-tra/mutual",
                            "test"});
#line 157
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table254, "When ");
#line hidden
#line 160
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 162
        testRunner.Given("I execute \"Submit\" activity using Post request and activity state is updated to \"" +
                        "Unassigned\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 164
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/AssignOwner" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table255 = new TechTalk.SpecFlow.Table(new string[] {
                            "owner/hrn"});
                table255.AddRow(new string[] {
                            "hrn:hrs:persons:301"});
#line 165
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table255, "When ");
#line hidden
#line 168
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 170
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/FinalizeTer" +
                        "ms\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table256 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url"});
                table256.AddRow(new string[] {
                            "test",
                            "doc.url"});
#line 171
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table256, "When ");
#line hidden
#line 174
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 176
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/SendForSign" +
                        "atures\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table257 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementDraft/name",
                            "agreementDraft/url",
                            "signatureType/hrn",
                            "signatureTransition/hrn"});
                table257.AddRow(new string[] {
                            "test",
                            "doc.url",
                            "hrn:hrs:lists:activity-signature-types/institutional-esign",
                            "hrn:hrs:lists:activity-signature-transitions/external-signature"});
#line 177
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table257, "When ");
#line hidden
#line 180
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 182
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Activate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table258 = new TechTalk.SpecFlow.Table(new string[] {
                            "effectiveDate"});
                table258.AddRow(new string[] {
                            "2021-02-25"});
#line 183
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table258, "When ");
#line hidden
#line 186
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 187
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 188
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Active\"" +
                        " for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_022_11_ValidateAgreementsAPI_Activities_SendForInternalSignature_Active")]
        public virtual void AGR_022_11_ValidateAgreementsAPI_Activities_SendForInternalSignature_Active()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_022_11_ValidateAgreementsAPI_Activities_SendForInternalSignature_Active", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 190
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 192
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Activate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 193
        testRunner.Then("I verify \"Activate\" activity is not allowed in \"Active\" state and validate the er" +
                        "ror message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 194
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 195
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Active\"" +
                        " for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_022_12_ValidateAgreementsAPI_Activities_SendForInternalSignature_Discarded")]
        public virtual void AGR_022_12_ValidateAgreementsAPI_Activities_SendForInternalSignature_Discarded()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_022_12_ValidateAgreementsAPI_Activities_SendForInternalSignature_Discarded", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 197
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 199
         testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table259 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "title",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementType/hrn",
                            "agreementTypeData/purposeOfInformationExchange/hrn",
                            "agreementTypeData/purposeOfInformationExchangeOther",
                            "agreementTypeData/directionOfInformationTransfer/hrn",
                            "agreementTypeData/descriptionOfConfidentialInformation"});
                table259.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Title_DateStamp",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CDA",
                            "hrn:hrs:lists:agrmt-cda-purp-info-ex/other",
                            "Test Other Data with Post",
                            "hrn:hrs:lists:agrmt-cda-dir-info-tra/mutual",
                            "test"});
#line 200
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table259, "When ");
#line hidden
#line 203
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 205
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Discard\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table260 = new TechTalk.SpecFlow.Table(new string[] {
                            "comments"});
                table260.AddRow(new string[] {
                            "Test"});
#line 206
        testRunner.When("I generate payload for Post request for Agreements", ((string)(null)), table260, "When ");
#line hidden
#line 209
        testRunner.When("I perform Post request for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 211
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/{hrn}/actions/Discard\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 212
        testRunner.Then("I verify \"Activate\" activity is not allowed in \"Discarded\" state and validate the" +
                        " error message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 213
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 214
        testRunner.Then("I perform Get Request and Validate value of \"activityState\" attribute is \"Discard" +
                        "ed\" for Agreements Activities", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
