// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HeartTest.Features.Agreements
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AGR_009_ValidateAgreementsAPI_Follow-Up")]
    [NUnit.Framework.CategoryAttribute("Smoke")]
    [NUnit.Framework.CategoryAttribute("agreements")]
    public partial class AGR_009_ValidateAgreementsAPI_Follow_UpFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Smoke",
                "agreements"};
        
#line 1 "AGR_009_ValidateAgreementsAPI_Follow-Up.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Agreements", "AGR_009_ValidateAgreementsAPI_Follow-Up", "Description: Automate and validate different Follow-up API", ProgrammingLanguage.CSharp, new string[] {
                        "Smoke",
                        "agreements"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_009_01_ValidateAgreementsAPI_Create_Follow-up_Postrequest")]
        public virtual void AGR_009_01_ValidateAgreementsAPI_Create_Follow_Up_Postrequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_009_01_ValidateAgreementsAPI_Create_Follow-up_Postrequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/hrn:hrs:agreements:642/fo" +
                        "llow-ups\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
        testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
        testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                            "description",
                            "followUpDate",
                            "isPrivate",
                            "notes",
                            "attachments/0/name",
                            "attachments/0/url"});
                table72.AddRow(new string[] {
                            "QA_description",
                            "8909-01-22",
                            "true",
                            "string",
                            "attachmentsname",
                            "www.hcg.com"});
#line 12
        testRunner.When("I generate payload of Agreements for Post request for Follow-up API", ((string)(null)), table72, "When ");
#line hidden
#line 15
       testRunner.When("I perform Post request for follow-up API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements/hrn:hrs:agreements:642/fol" +
                        "low-ups/{id}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 17
        testRunner.Then("I perform Get Request and Validate value of \"description\" attribute is \"QA_descri" +
                        "ption\" for Agreements Follow-up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
        testRunner.Then("I perform Get Request and Validate value of \"isPrivate\" attribute is \"true\" for A" +
                        "greements Follow-up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 19
        testRunner.Then("I perform Get Request and Validate value of \"notes\" attribute is \"string\" for Agr" +
                        "eements Follow-up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
        testRunner.Then("I perform Get Request and Validate value of \"attachments/0/url\" attribute is \"www" +
                        ".hcg.com\" for Agreements Follow-up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_009_02_ValidateAgreementsAPI_Update_Follow-up_Putrequest")]
        public virtual void AGR_009_02_ValidateAgreementsAPI_Update_Follow_Up_Putrequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_009_02_ValidateAgreementsAPI_Update_Follow-up_Putrequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 25
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 27
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/hrn:hrs:agreements:642/fo" +
                        "llow-ups/{id}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                            "description",
                            "followUpDate",
                            "isPrivate",
                            "notes",
                            "attachments/0/name",
                            "attachments/0/url"});
                table73.AddRow(new string[] {
                            "QA_description",
                            "8909-01-22",
                            "true",
                            "string",
                            "attachmentsname",
                            "www.hcg.com"});
#line 28
       testRunner.When("I update payload of Agreements for put request", ((string)(null)), table73, "When ");
#line hidden
#line 31
       testRunner.When("I perform Put request for follow-up API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
       testRunner.Then("I validate status code for Put requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements/hrn:hrs:agreements:642/fol" +
                        "low-ups/{id}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 34
        testRunner.Then("I perform Get Request and Validate value of \"description\" attribute is \"QA_descri" +
                        "ption\" for Agreements Follow-up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
        testRunner.Then("I perform Get Request and Validate value of \"notes\" attribute is \"string\" for Agr" +
                        "eements Follow-up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
        testRunner.Then("I perform Get Request and Validate value of \"attachments/0/url\" attribute is \"www" +
                        ".hcg.com\" for Agreements Follow-up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_009_03_ValidateAgreementsAPI_Update_Follow-up_Patchrequest")]
        public virtual void AGR_009_03_ValidateAgreementsAPI_Update_Follow_Up_Patchrequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_009_03_ValidateAgreementsAPI_Update_Follow-up_Patchrequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 40
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 42
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/hrn:hrs:agreements:642/fo" +
                        "llow-ups/{id}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                            "description",
                            "followUpDate",
                            "isPrivate",
                            "notes",
                            "attachments/0/name",
                            "attachments/0/url"});
                table74.AddRow(new string[] {
                            "QA_description",
                            "2022-01-20",
                            "false",
                            "newstring",
                            "attachmentsname",
                            "www.hcg.com"});
#line 43
        testRunner.When("I update payload of Agreements for patch request", ((string)(null)), table74, "When ");
#line hidden
#line 46
       testRunner.When("I perform Patch request for follow-up API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
    testRunner.Then("I validate status code for Patch request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 48
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements/hrn:hrs:agreements:642/fol" +
                        "low-ups/{id}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 49
        testRunner.Then("I perform Get Request and Validate value of \"description\" attribute is \"QA_descri" +
                        "ption\" for Agreements Follow-up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
        testRunner.Then("I perform Get Request and Validate value of \"notes\" attribute is \"string\" for Agr" +
                        "eements Follow-up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
        testRunner.Then("I perform Get Request and Validate value of \"attachments/0/url\" attribute is \"www" +
                        ".hcg.com\" for Agreements Follow-up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_009_04_ValidateAgreementsAPI_Complete_Follow-up_Postrequest")]
        public virtual void AGR_009_04_ValidateAgreementsAPI_Complete_Follow_Up_Postrequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_009_04_ValidateAgreementsAPI_Complete_Follow-up_Postrequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 55
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 57
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/hrn:hrs:agreements:642/fo" +
                        "llow-ups/{id}/complete\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                            "description",
                            "followUpDate",
                            "isPrivate",
                            "notes",
                            "attachments/0/name",
                            "attachments/0/url"});
                table75.AddRow(new string[] {
                            "QA_description",
                            "8909-01-2022",
                            "false",
                            "newstring",
                            "attachmentsname",
                            "www.hcg.com"});
#line 58
        testRunner.When("I update payload of Agreements for put request", ((string)(null)), table75, "When ");
#line hidden
#line 61
       testRunner.When("I perform Post request for follow-up API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 62
    testRunner.Then("I validate status code for post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 63
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/agreements/hrn:hrs:agreements:642/fol" +
                        "low-ups/{id}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 64
        testRunner.Then("I perform Get Request and Validate value of \"description\" attribute is \"QA_descri" +
                        "ption\" for Agreements Follow-up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 65
        testRunner.Then("I perform Get Request and Validate value of \"notes\" attribute is \"string\" for Agr" +
                        "eements Follow-up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 66
        testRunner.Then("I perform Get Request and Validate value of \"attachments/0/url\" attribute is \"www" +
                        ".hcg.com\" for Agreements Follow-up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 67
        testRunner.Then("I perform Get Request and Validate value of \"status\" attribute is \"Complete\" for " +
                        "Agreements Follow-up", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_009_05_ValidateAgreementsAPI_Delete_Follow-up_Deleterequest")]
        public virtual void AGR_009_05_ValidateAgreementsAPI_Delete_Follow_Up_Deleterequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_009_05_ValidateAgreementsAPI_Delete_Follow-up_Deleterequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 73
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/hrn:hrs:agreements:642/fo" +
                        "llow-ups/{id}\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 74
        testRunner.When("I perform Delete request for follow-up API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 75
        testRunner.Then("I validate status code for Delete requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_009_06_ValidateAgreementsAPI_GetAll_Follow-up_Getrequest")]
        public virtual void AGR_009_06_ValidateAgreementsAPI_GetAll_Follow_Up_Getrequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_009_06_ValidateAgreementsAPI_GetAll_Follow-up_Getrequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 78
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 79
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/hrn:hrs:agreements:642/fo" +
                        "llow-ups\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 80
        testRunner.When("I perform Get request for follow-up API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 81
        testRunner.Then("I validate status code for Get requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 82
        testRunner.Then("I validate Sort by \"followUpDate\" in Get Request for follow-up API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 83
         testRunner.Then("I validate Sort by \"completedDate\" in Get Request for follow-up API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 84
         testRunner.Then("I validate Sort by \"createdBy\" in Get Request for follow-up API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
         testRunner.Then("I validate Sort by \"description\" in Get Request for follow-up API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
         testRunner.Then("I validate Sort by \"status\" in Get Request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 87
         testRunner.Then("I validate filter by \"status\" with value \"Not Complete\" in Get Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 88
         testRunner.Then("I validate filter by \"status\" with value \"Complete\" in Get Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 89
         testRunner.Then("I validate filter by \"description\" with value \"QA_description\" in Get Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 90
         testRunner.Then("I validate filter by \"createdBy\" with value \"System Administrator\" in Get Request" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 91
         testRunner.Then("I validate filter by \"completedDate\" with value \"2022-03-04T06:31:55.7682000\" in " +
                        "Get Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 92
         testRunner.Then("I validate filter by \"followUpDate\" with value \"8909-01-22T00:00:00.0000000\" in G" +
                        "et Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 93
         testRunner.Then("I validate pagination by \"pageSize\" with value \"65\" in Get Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 94
         testRunner.Then("I validate pagination by \"offset\" with value \"6\" in Get Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_009_07_ErrorMessageValidation_Follow-upAPI")]
        public virtual void AGR_009_07_ErrorMessageValidation_Follow_UpAPI()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_009_07_ErrorMessageValidation_Follow-upAPI", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 97
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 99
      testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/hrn:hrs:agreements:642/fo" +
                        "llow-ups\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                            "followUpDate",
                            "isPrivate",
                            "notes",
                            "attachments/0/name",
                            "attachments/0/url"});
                table76.AddRow(new string[] {
                            "8909-01-22",
                            "true",
                            "string",
                            "attachmentsname",
                            "www.hcg.com"});
#line 100
      testRunner.When("I generate payload of Agreements for Post request for Follow-up API", ((string)(null)), table76, "When ");
#line hidden
#line 103
      testRunner.When("I perform Post request for follow-up API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 104
      testRunner.Then("I Validate the error message for missing required field description in post reque" +
                        "st", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 105
      testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 108
      testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements/hrn:hrs:agreements:642/fo" +
                        "llow-ups\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                            "description",
                            "isPrivate",
                            "notes",
                            "attachments/0/name",
                            "attachments/0/url"});
                table77.AddRow(new string[] {
                            "QA_description",
                            "true",
                            "string",
                            "attachmentsname",
                            "www.hcg.com"});
#line 109
      testRunner.When("I generate payload of Agreements for Post request for Follow-up API", ((string)(null)), table77, "When ");
#line hidden
#line 112
      testRunner.When("I perform Post request for follow-up API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 113
      testRunner.Then("I Validate the error message for missing required field followUpDate in post requ" +
                        "est", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 114
      testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
