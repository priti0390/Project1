// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HeartTest.Features.Agreements
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AGR_006_ValidateAgreementsAPI_CTA")]
    [NUnit.Framework.CategoryAttribute("Smoke")]
    [NUnit.Framework.CategoryAttribute("agreements")]
    public partial class AGR_006_ValidateAgreementsAPI_CTAFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "Smoke",
                "agreements"};
        
#line 1 "AGR_006_ValidateAgreementsAPI_CTA.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Agreements", "AGR_006_ValidateAgreementsAPI_CTA", "\tDescription: Validate GET, POST, PUT and PATCH Requests for CTA Agreements API ", ProgrammingLanguage.CSharp, new string[] {
                        "Smoke",
                        "agreements"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_006_01_ValidateAgreementsAPI_CTA-TypeOfTrail-IndustrySponsored_PostRequest")]
        public virtual void AGR_006_01_ValidateAgreementsAPI_CTA_TypeOfTrail_IndustrySponsored_PostRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_006_01_ValidateAgreementsAPI_CTA-TypeOfTrail-IndustrySponsored_PostRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
        testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
        testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                            "title",
                            "firstDraftTobeGeneratedInternally",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "agreementType/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementTypeData/typeOfTrial/hrn",
                            "agreementTypeData/phaseOfStudy/hrn",
                            "agreementTypeData/sponsorProtocolNumber",
                            "agreementTypeData/protocolTitle",
                            "agreementTypeData/protocolDocument/url",
                            "agreementTypeData/consentFormsDocuments/0/url",
                            "agreementTypeData/isReimbursementTobeProvided",
                            "agreementTypeData/willUseCro",
                            "agreementTypeData/cro/hrn",
                            "agreementTypeData/croOther",
                            "agreementTypeData/croContactsOther/1/person/hrn",
                            "agreementTypeData/croContactsOther/2/person/hrn",
                            "agreementTypeData/croContactsOther/2/contactName",
                            "agreementTypeData/croContactsOther/2/contactPhone",
                            "agreementTypeData/croContactsOther/2/contactEmail",
                            "agreementTypeData/croContactPrimary/person/hrn",
                            "agreementTypeData/doesThisInvolveSubrecipients",
                            "agreementTypeData/subrecipientsOrganizations",
                            "agreementTypeData/ctaMaterials/0/materialType/hrn",
                            "agreementTypeData/ctaMaterials/0/useInTrial/hrn",
                            "agreementTypeData/ctaMaterials/0/provider",
                            "agreementTypeData/ctaMaterials/0/materialDescription",
                            "agreementTypeData/doesThisInvolveOtherMaterials",
                            "agreementTypeData/ctaMaterialsOther/0/materialType/hrn",
                            "agreementTypeData/ctaMaterialsOther/0/provider",
                            "agreementTypeData/ctaMaterialsOther/0/materialDescription",
                            "agreementTypeData/isStudyPartOfCooperativeGroup"});
                table56.AddRow(new string[] {
                            "Agreement MTA Test 514",
                            "true",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CTA",
                            "hrn:hrs:orgs:309",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-cta-type-trial/ind-sp",
                            "hrn:hrs:lists:agrmt-cta-phase-study/phase-1",
                            "FF720W",
                            "Wyeth ZZ784",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "false",
                            "true",
                            "hrn:hrs:orgs:33",
                            "test",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:811",
                            "contact2",
                            "044-1234567",
                            "contactEmail@huron.com",
                            "hrn:hrs:persons:801",
                            "null",
                            "null",
                            "hrn:hrs:lists:agrmt-cta-material-type/other",
                            "hrn:hrs:lists:agrmt-cta-use-in-trial/research",
                            "provider1",
                            "materialDescription12",
                            "true",
                            "hrn:hrs:lists:agrmt-cta-material-type-other/other",
                            "provider1",
                            "materialDescription",
                            "true"});
#line 11
         testRunner.When("I generate payload of Agreements for Post request for CTA API", ((string)(null)), table56, "When ");
#line hidden
#line 14
         testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 15
        testRunner.Then("I Validate new record after post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
        testRunner.Then("I perform Get request and verify the resource created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
      testRunner.And("I Validate \"agreementType/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
      testRunner.And("I Validate \"agreementTypeData/typeOfTrial/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
        testRunner.And("I Validate \"agreementTypeData/phaseOfStudy/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
        testRunner.And("I Validate \"agreementTypeData/sponsorProtocolNumber\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
        testRunner.And("I Validate \"agreementTypeData/protocolTitle\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
        testRunner.And("I Validate \"agreementTypeData/isReimbursementTobeProvided\" attribute for Agreemen" +
                        "ts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
        testRunner.And("I Validate \"agreementTypeData/willUseCro\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
        testRunner.And("I Validate \"agreementTypeData/croOther\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
       testRunner.And("I Validate \"agreementTypeData/croContactsOther/1/person/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
       testRunner.And("I Validate \"agreementTypeData/croContactPrimary/person/hrn\" attribute for Agreeme" +
                        "nts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
       testRunner.And("I Validate \"agreementTypeData/ctaMaterials/0/materialType/hrn\" attribute for Agre" +
                        "ements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
       testRunner.And("I Validate \"agreementTypeData/ctaMaterials/0/useInTrial/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
       testRunner.And("I Validate \"agreementTypeData/doesThisInvolveOtherMaterials\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
       testRunner.And("I Validate \"agreementTypeData/isStudyPartOfCooperativeGroup\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_006_02_ValidateAgreementsAPI_CTA-TypeOfTrail-IndustrySponsored_PutRequest")]
        public virtual void AGR_006_02_ValidateAgreementsAPI_CTA_TypeOfTrail_IndustrySponsored_PutRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_006_02_ValidateAgreementsAPI_CTA-TypeOfTrail-IndustrySponsored_PutRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 35
     testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 36
     testRunner.Then("I retrieve data using unique key received after successful Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementType/hrn",
                            "agreementTypeData/typeOfTrial/hrn",
                            "agreementTypeData/phaseOfStudy/hrn",
                            "agreementTypeData/sponsorProtocolNumber",
                            "agreementTypeData/protocolTitle",
                            "agreementTypeData/protocolDocument/url",
                            "agreementTypeData/consentFormsDocuments/0/url",
                            "agreementTypeData/isReimbursementTobeProvided",
                            "agreementTypeData/willUseCro",
                            "agreementTypeData/cro/hrn",
                            "agreementTypeData/croOther",
                            "agreementTypeData/croContactsOther/1/person/hrn",
                            "agreementTypeData/croContactsOther/2/person/hrn",
                            "agreementTypeData/croContactsOther/2/contactName",
                            "agreementTypeData/croContactsOther/2/contactPhone",
                            "agreementTypeData/croContactsOther/2/contactEmail",
                            "agreementTypeData/croContactPrimary/person/hrn",
                            "agreementTypeData/doesThisInvolveSubrecipients",
                            "agreementTypeData/subrecipientsOrganizations",
                            "agreementTypeData/ctaMaterials/0/materialType/hrn",
                            "agreementTypeData/ctaMaterials/0/useInTrial/hrn",
                            "agreementTypeData/ctaMaterials/0/provider",
                            "agreementTypeData/ctaMaterials/0/materialDescription",
                            "agreementTypeData/doesThisInvolveOtherMaterials",
                            "agreementTypeData/ctaMaterialsOther/0/materialType/hrn",
                            "agreementTypeData/ctaMaterialsOther/0/provider",
                            "agreementTypeData/ctaMaterialsOther/0/materialDescription",
                            "agreementTypeData/isStudyPartOfCooperativeGroup"});
                table57.AddRow(new string[] {
                            "hrn:hrs:lists:agrmt-types/CTA",
                            "hrn:hrs:lists:agrmt-cta-type-trial/ind-sp",
                            "hrn:hrs:lists:agrmt-cta-phase-study/phase-2",
                            "FF720W",
                            "Wyeth ZZ784",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "false",
                            "true",
                            "hrn:hrs:orgs:33",
                            "test",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:811",
                            "contact2",
                            "044-1234567",
                            "contactEmail@huron.com",
                            "hrn:hrs:persons:801",
                            "null",
                            "null",
                            "hrn:hrs:lists:agrmt-cta-material-type/device",
                            "hrn:hrs:lists:agrmt-cta-use-in-trial/standard-of-care",
                            "provider1",
                            "materialDescription12",
                            "true",
                            "hrn:hrs:lists:agrmt-cta-material-type-other/equipment",
                            "provider1",
                            "materialDescription",
                            "true"});
#line 37
      testRunner.When("I update payload of Agreements for put request", ((string)(null)), table57, "When ");
#line hidden
#line 40
     testRunner.When("I perform Put request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
  testRunner.Then("I validate status code for Put requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
      testRunner.And("I Validate \"agreementType/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
      testRunner.And("I Validate \"agreementTypeData/typeOfTrial/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
        testRunner.And("I Validate \"agreementTypeData/phaseOfStudy/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
        testRunner.And("I Validate \"agreementTypeData/sponsorProtocolNumber\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
        testRunner.And("I Validate \"agreementTypeData/protocolTitle\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
        testRunner.And("I Validate \"agreementTypeData/isReimbursementTobeProvided\" attribute for Agreemen" +
                        "ts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
        testRunner.And("I Validate \"agreementTypeData/willUseCro\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
        testRunner.And("I Validate \"agreementTypeData/croOther\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
       testRunner.And("I Validate \"agreementTypeData/croContactsOther/1/person/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
       testRunner.And("I Validate \"agreementTypeData/croContactPrimary/person/hrn\" attribute for Agreeme" +
                        "nts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
       testRunner.And("I Validate \"agreementTypeData/ctaMaterials/0/materialType/hrn\" attribute for Agre" +
                        "ements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
       testRunner.And("I Validate \"agreementTypeData/ctaMaterials/0/useInTrial/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
       testRunner.And("I Validate \"agreementTypeData/doesThisInvolveOtherMaterials\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
       testRunner.And("I Validate \"agreementTypeData/isStudyPartOfCooperativeGroup\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_006_03_ValidateAgreementsAPI_CTA-TypeOfTrail-IndustrySponsored_PatchRequest")]
        public virtual void AGR_006_03_ValidateAgreementsAPI_CTA_TypeOfTrail_IndustrySponsored_PatchRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_006_03_ValidateAgreementsAPI_CTA-TypeOfTrail-IndustrySponsored_PatchRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 62
   testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "hrn"});
                table58.AddRow(new string[] {
                            "hrn:hrs:agreements:797"});
#line 63
    testRunner.When("I retrieve data using unique key by Get Request for Agreements", ((string)(null)), table58, "When ");
#line hidden
                TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementType/hrn",
                            "agreementTypeData/typeOfTrial/hrn",
                            "agreementTypeData/phaseOfStudy/hrn",
                            "agreementTypeData/sponsorProtocolNumber",
                            "agreementTypeData/protocolTitle",
                            "agreementTypeData/protocolDocument/url",
                            "agreementTypeData/consentFormsDocuments/0/url",
                            "agreementTypeData/isReimbursementTobeProvided",
                            "agreementTypeData/willUseCro",
                            "agreementTypeData/cro/hrn",
                            "agreementTypeData/croOther",
                            "agreementTypeData/croContactsOther/1/person/hrn",
                            "agreementTypeData/croContactsOther/2/person/hrn",
                            "agreementTypeData/croContactsOther/2/contactName",
                            "agreementTypeData/croContactsOther/2/contactPhone",
                            "agreementTypeData/croContactsOther/2/contactEmail",
                            "agreementTypeData/croContactPrimary/person/hrn",
                            "agreementTypeData/doesThisInvolveSubrecipients",
                            "agreementTypeData/subrecipientsOrganizations",
                            "agreementTypeData/ctaMaterials/0/materialType/hrn",
                            "agreementTypeData/ctaMaterials/0/useInTrial/hrn",
                            "agreementTypeData/ctaMaterials/0/provider",
                            "agreementTypeData/ctaMaterials/0/materialDescription",
                            "agreementTypeData/doesThisInvolveOtherMaterials",
                            "agreementTypeData/ctaMaterialsOther/0/materialType/hrn",
                            "agreementTypeData/ctaMaterialsOther/0/provider",
                            "agreementTypeData/ctaMaterialsOther/0/materialDescription",
                            "agreementTypeData/isStudyPartOfCooperativeGroup"});
                table59.AddRow(new string[] {
                            "hrn:hrs:lists:agrmt-types/CTA",
                            "hrn:hrs:lists:agrmt-cta-type-trial/ind-sp",
                            "hrn:hrs:lists:agrmt-cta-phase-study/phase-3",
                            "FF720W",
                            "Wyeth ZZ784",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "false",
                            "true",
                            "hrn:hrs:orgs:33",
                            "test",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:811",
                            "contact2",
                            "044-1234567",
                            "contactEmail@huron.com",
                            "hrn:hrs:persons:801",
                            "null",
                            "null",
                            "hrn:hrs:lists:agrmt-cta-material-type/drug",
                            "hrn:hrs:lists:agrmt-cta-use-in-trial/research",
                            "provider1",
                            "materialDescription12",
                            "true",
                            "hrn:hrs:lists:agrmt-cta-material-type-other/other",
                            "provider1",
                            "materialDescription",
                            "true"});
#line 66
    testRunner.When("I create payload for Patch request", ((string)(null)), table59, "When ");
#line hidden
#line 69
    testRunner.When("I perform Patch request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 70
 testRunner.Then("I validate status code for Patch request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
      testRunner.And("I Validate \"agreementType/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
      testRunner.And("I Validate \"agreementTypeData/typeOfTrial/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
        testRunner.And("I Validate \"agreementTypeData/phaseOfStudy/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
        testRunner.And("I Validate \"agreementTypeData/sponsorProtocolNumber\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
        testRunner.And("I Validate \"agreementTypeData/protocolTitle\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
        testRunner.And("I Validate \"agreementTypeData/isReimbursementTobeProvided\" attribute for Agreemen" +
                        "ts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
        testRunner.And("I Validate \"agreementTypeData/willUseCro\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
        testRunner.And("I Validate \"agreementTypeData/croOther\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
       testRunner.And("I Validate \"agreementTypeData/croContactsOther/1/person/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
       testRunner.And("I Validate \"agreementTypeData/croContactPrimary/person/hrn\" attribute for Agreeme" +
                        "nts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
       testRunner.And("I Validate \"agreementTypeData/ctaMaterials/0/materialType/hrn\" attribute for Agre" +
                        "ements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
       testRunner.And("I Validate \"agreementTypeData/ctaMaterials/0/useInTrial/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
       testRunner.And("I Validate \"agreementTypeData/doesThisInvolveOtherMaterials\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
       testRunner.And("I Validate \"agreementTypeData/isStudyPartOfCooperativeGroup\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_006_04_ValidateAgreementsAPI_CTA-TypeOfTrail-InitiatedAtOurInstitution_PostRe" +
            "quest")]
        public virtual void AGR_006_04_ValidateAgreementsAPI_CTA_TypeOfTrail_InitiatedAtOurInstitution_PostRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_006_04_ValidateAgreementsAPI_CTA-TypeOfTrail-InitiatedAtOurInstitution_PostRe" +
                    "quest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 89
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 90
        testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
        testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                            "title",
                            "firstDraftTobeGeneratedInternally",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "agreementType/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementTypeData/typeOfTrial/hrn",
                            "agreementTypeData/phaseOfStudy/hrn",
                            "agreementTypeData/sponsorProtocolNumber",
                            "agreementTypeData/protocolTitle",
                            "agreementTypeData/protocolDocument/url",
                            "agreementTypeData/consentFormsDocuments/0/url",
                            "agreementTypeData/isReimbursementTobeProvided",
                            "agreementTypeData/willUseCro",
                            "agreementTypeData/cro/hrn",
                            "agreementTypeData/croOther",
                            "agreementTypeData/croContactsOther/1/person/hrn",
                            "agreementTypeData/croContactsOther/2/person/hrn",
                            "agreementTypeData/croContactsOther/2/contactName",
                            "agreementTypeData/croContactsOther/2/contactPhone",
                            "agreementTypeData/croContactsOther/2/contactEmail",
                            "agreementTypeData/croContactPrimary/person/hrn",
                            "agreementTypeData/doesThisInvolveSubrecipients",
                            "agreementTypeData/subrecipientsOrganizations/0/organization/hrn",
                            "agreementTypeData/ctaMaterials/0/materialType/hrn",
                            "agreementTypeData/ctaMaterials/0/useInTrial/hrn",
                            "agreementTypeData/ctaMaterials/0/provider",
                            "agreementTypeData/ctaMaterials/0/materialDescription",
                            "agreementTypeData/doesThisInvolveOtherMaterials",
                            "agreementTypeData/ctaMaterialsOther/0/materialType/hrn",
                            "agreementTypeData/ctaMaterialsOther/0/provider",
                            "agreementTypeData/ctaMaterialsOther/0/materialDescription",
                            "agreementTypeData/isStudyPartOfCooperativeGroup"});
                table60.AddRow(new string[] {
                            "Agreement MTA Test 514",
                            "true",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CTA",
                            "hrn:hrs:orgs:309",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-cta-type-trial/inv-init-inst",
                            "hrn:hrs:lists:agrmt-cta-phase-study/phase-4",
                            "null",
                            "Wyeth ZZ784",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "false",
                            "true",
                            "hrn:hrs:orgs:33",
                            "test",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:811",
                            "contact2",
                            "044-1234567",
                            "contactEmail@huron.com",
                            "hrn:hrs:persons:801",
                            "true",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:lists:agrmt-cta-material-type/device",
                            "hrn:hrs:lists:agrmt-cta-use-in-trial/standard-of-care",
                            "provider1",
                            "materialDescription12",
                            "true",
                            "hrn:hrs:lists:agrmt-cta-material-type-other/equipment",
                            "provider1",
                            "materialDescription",
                            "true"});
#line 92
         testRunner.When("I generate payload of Agreements for Post request for CTA API", ((string)(null)), table60, "When ");
#line hidden
#line 95
         testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 96
        testRunner.Then("I Validate new record after post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
        testRunner.Then("I perform Get request and verify the resource created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 98
      testRunner.And("I Validate \"agreementType/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
      testRunner.And("I Validate \"agreementTypeData/typeOfTrial/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 100
        testRunner.And("I Validate \"agreementTypeData/phaseOfStudy/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 101
        testRunner.And("I Validate \"agreementTypeData/sponsorProtocolNumber\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
        testRunner.And("I Validate \"agreementTypeData/protocolTitle\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
        testRunner.And("I Validate \"agreementTypeData/isReimbursementTobeProvided\" attribute for Agreemen" +
                        "ts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
        testRunner.And("I Validate \"agreementTypeData/willUseCro\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
        testRunner.And("I Validate \"agreementTypeData/croOther\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
       testRunner.And("I Validate \"agreementTypeData/croContactsOther/1/person/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
       testRunner.And("I Validate \"agreementTypeData/croContactPrimary/person/hrn\" attribute for Agreeme" +
                        "nts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
       testRunner.And("I Validate \"agreementTypeData/ctaMaterials/0/materialType/hrn\" attribute for Agre" +
                        "ements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
       testRunner.And("I Validate \"agreementTypeData/ctaMaterials/0/useInTrial/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 110
       testRunner.And("I Validate \"agreementTypeData/doesThisInvolveOtherMaterials\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
       testRunner.And("I Validate \"agreementTypeData/doesThisInvolveSubrecipients\" attribute for Agreeme" +
                        "nts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
        testRunner.And("I Validate \"agreementTypeData/subrecipientsOrganizations/0/organization/hrn\" attr" +
                        "ibute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
       testRunner.And("I Validate \"agreementTypeData/isStudyPartOfCooperativeGroup\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_006_05_ValidateAgreementsAPI_CTA-TypeOfTrail-InitiatedAtOurInstitution_PutReq" +
            "uest")]
        public virtual void AGR_006_05_ValidateAgreementsAPI_CTA_TypeOfTrail_InitiatedAtOurInstitution_PutRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_006_05_ValidateAgreementsAPI_CTA-TypeOfTrail-InitiatedAtOurInstitution_PutReq" +
                    "uest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 117
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 118
     testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 119
     testRunner.Then("I retrieve data using unique key received after successful Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementType/hrn",
                            "agreementTypeData/typeOfTrial/hrn",
                            "agreementTypeData/phaseOfStudy/hrn",
                            "agreementTypeData/sponsorProtocolNumber",
                            "agreementTypeData/protocolTitle",
                            "agreementTypeData/protocolDocument/url",
                            "agreementTypeData/consentFormsDocuments/0/url",
                            "agreementTypeData/isReimbursementTobeProvided",
                            "agreementTypeData/willUseCro",
                            "agreementTypeData/cro/hrn",
                            "agreementTypeData/croOther",
                            "agreementTypeData/croContactsOther/1/person/hrn",
                            "agreementTypeData/croContactsOther/2/person/hrn",
                            "agreementTypeData/croContactsOther/2/contactName",
                            "agreementTypeData/croContactsOther/2/contactPhone",
                            "agreementTypeData/croContactsOther/2/contactEmail",
                            "agreementTypeData/croContactPrimary/person/hrn",
                            "agreementTypeData/doesThisInvolveSubrecipients",
                            "agreementTypeData/subrecipientsOrganizations/0/organization/hrn",
                            "agreementTypeData/ctaMaterials/0/materialType/hrn",
                            "agreementTypeData/ctaMaterials/0/useInTrial/hrn",
                            "agreementTypeData/ctaMaterials/0/provider",
                            "agreementTypeData/ctaMaterials/0/materialDescription",
                            "agreementTypeData/doesThisInvolveOtherMaterials",
                            "agreementTypeData/ctaMaterialsOther/0/materialType/hrn",
                            "agreementTypeData/ctaMaterialsOther/0/provider",
                            "agreementTypeData/ctaMaterialsOther/0/materialDescription",
                            "agreementTypeData/isStudyPartOfCooperativeGroup"});
                table61.AddRow(new string[] {
                            "hrn:hrs:lists:agrmt-types/CTA",
                            "hrn:hrs:lists:agrmt-cta-type-trial/inv-init-inst",
                            "hrn:hrs:lists:agrmt-cta-phase-study/phase-otr",
                            "null",
                            "Wyeth ZZ784",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "false",
                            "true",
                            "hrn:hrs:orgs:33",
                            "test",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:811",
                            "contact2",
                            "044-1234567",
                            "contactEmail@huron.com",
                            "hrn:hrs:persons:801",
                            "true",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:lists:agrmt-cta-material-type/drug",
                            "hrn:hrs:lists:agrmt-cta-use-in-trial/research",
                            "provider1",
                            "materialDescription12",
                            "true",
                            "hrn:hrs:lists:agrmt-cta-material-type-other/equipment",
                            "provider1",
                            "materialDescription",
                            "true"});
#line 120
      testRunner.When("I update payload of Agreements for put request", ((string)(null)), table61, "When ");
#line hidden
#line 123
     testRunner.When("I perform Put request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 124
  testRunner.Then("I validate status code for Put requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 125
      testRunner.And("I Validate \"agreementType/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
      testRunner.And("I Validate \"agreementTypeData/typeOfTrial/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
        testRunner.And("I Validate \"agreementTypeData/phaseOfStudy/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
        testRunner.And("I Validate \"agreementTypeData/sponsorProtocolNumber\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 129
        testRunner.And("I Validate \"agreementTypeData/protocolTitle\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 130
        testRunner.And("I Validate \"agreementTypeData/isReimbursementTobeProvided\" attribute for Agreemen" +
                        "ts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
        testRunner.And("I Validate \"agreementTypeData/willUseCro\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 132
        testRunner.And("I Validate \"agreementTypeData/croOther\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 133
       testRunner.And("I Validate \"agreementTypeData/croContactsOther/1/person/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 134
       testRunner.And("I Validate \"agreementTypeData/croContactPrimary/person/hrn\" attribute for Agreeme" +
                        "nts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 135
       testRunner.And("I Validate \"agreementTypeData/ctaMaterials/0/materialType/hrn\" attribute for Agre" +
                        "ements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 136
       testRunner.And("I Validate \"agreementTypeData/ctaMaterials/0/useInTrial/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 137
       testRunner.And("I Validate \"agreementTypeData/doesThisInvolveOtherMaterials\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 138
        testRunner.And("I Validate \"agreementTypeData/doesThisInvolveSubrecipients\" attribute for Agreeme" +
                        "nts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 139
        testRunner.And("I Validate \"agreementTypeData/subrecipientsOrganizations/0/organization/hrn\" attr" +
                        "ibute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
       testRunner.And("I Validate \"agreementTypeData/isStudyPartOfCooperativeGroup\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_006_06_ValidateAgreementsAPI_CTA-TypeOfTrail-InvestigatorInitiatedAtAnotherIn" +
            "stitution_PostRequest")]
        public virtual void AGR_006_06_ValidateAgreementsAPI_CTA_TypeOfTrail_InvestigatorInitiatedAtAnotherInstitution_PostRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_006_06_ValidateAgreementsAPI_CTA-TypeOfTrail-InvestigatorInitiatedAtAnotherIn" +
                    "stitution_PostRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 144
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 145
        testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 146
        testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
        testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                            "title",
                            "firstDraftTobeGeneratedInternally",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "agreementType/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementTypeData/typeOfTrial/hrn",
                            "agreementTypeData/phaseOfStudy/hrn",
                            "agreementTypeData/sponsorProtocolNumber",
                            "agreementTypeData/protocolTitle",
                            "agreementTypeData/protocolDocument/url",
                            "agreementTypeData/consentFormsDocuments/0/url",
                            "agreementTypeData/isReimbursementTobeProvided",
                            "agreementTypeData/willUseCro",
                            "agreementTypeData/cro/hrn",
                            "agreementTypeData/croOther",
                            "agreementTypeData/croContactsOther/1/person/hrn",
                            "agreementTypeData/croContactsOther/2/person/hrn",
                            "agreementTypeData/croContactsOther/2/contactName",
                            "agreementTypeData/croContactsOther/2/contactPhone",
                            "agreementTypeData/croContactsOther/2/contactEmail",
                            "agreementTypeData/croContactPrimary/person/hrn",
                            "agreementTypeData/doesThisInvolveSubrecipients",
                            "agreementTypeData/subrecipientsOrganizations",
                            "agreementTypeData/ctaMaterials/0/materialType/hrn",
                            "agreementTypeData/ctaMaterials/0/useInTrial/hrn",
                            "agreementTypeData/ctaMaterials/0/provider",
                            "agreementTypeData/ctaMaterials/0/materialDescription",
                            "agreementTypeData/doesThisInvolveOtherMaterials",
                            "agreementTypeData/ctaMaterialsOther/0/materialType/hrn",
                            "agreementTypeData/ctaMaterialsOther/0/provider",
                            "agreementTypeData/ctaMaterialsOther/0/materialDescription",
                            "agreementTypeData/isStudyPartOfCooperativeGroup"});
                table62.AddRow(new string[] {
                            "Agreement MTA Test 514",
                            "true",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CTA",
                            "hrn:hrs:orgs:309",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-cta-type-trial/inv-init-otr-inst",
                            "hrn:hrs:lists:agrmt-cta-phase-study/phase-registry",
                            "Z123EF",
                            "Wyeth ZZ784",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "false",
                            "true",
                            "hrn:hrs:orgs:33",
                            "test",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:811",
                            "contact2",
                            "044-1234567",
                            "contactEmail@huron.com",
                            "hrn:hrs:persons:801",
                            "null",
                            "null",
                            "hrn:hrs:lists:agrmt-cta-material-type/device",
                            "hrn:hrs:lists:agrmt-cta-use-in-trial/standard-of-care",
                            "provider1",
                            "materialDescription12",
                            "true",
                            "hrn:hrs:lists:agrmt-cta-material-type-other/equipment",
                            "provider1",
                            "materialDescription",
                            "true"});
#line 148
         testRunner.When("I generate payload of Agreements for Post request for CTA API", ((string)(null)), table62, "When ");
#line hidden
#line 151
         testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 152
        testRunner.Then("I Validate new record after post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 153
        testRunner.Then("I perform Get request and verify the resource created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 154
      testRunner.And("I Validate \"agreementType/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 155
      testRunner.And("I Validate \"agreementTypeData/typeOfTrial/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 156
        testRunner.And("I Validate \"agreementTypeData/phaseOfStudy/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 157
        testRunner.And("I Validate \"agreementTypeData/sponsorProtocolNumber\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 158
        testRunner.And("I Validate \"agreementTypeData/protocolTitle\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 159
        testRunner.And("I Validate \"agreementTypeData/isReimbursementTobeProvided\" attribute for Agreemen" +
                        "ts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 160
        testRunner.And("I Validate \"agreementTypeData/willUseCro\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 161
        testRunner.And("I Validate \"agreementTypeData/croOther\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 162
       testRunner.And("I Validate \"agreementTypeData/croContactsOther/1/person/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 163
       testRunner.And("I Validate \"agreementTypeData/croContactPrimary/person/hrn\" attribute for Agreeme" +
                        "nts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 164
       testRunner.And("I Validate \"agreementTypeData/ctaMaterials/0/materialType/hrn\" attribute for Agre" +
                        "ements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 165
       testRunner.And("I Validate \"agreementTypeData/ctaMaterials/0/useInTrial/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 166
       testRunner.And("I Validate \"agreementTypeData/doesThisInvolveOtherMaterials\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 167
       testRunner.And("I Validate \"agreementTypeData/isStudyPartOfCooperativeGroup\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_006_07_ValidateAgreementsAPI_CTA-TypeOfTrail-InvestigatorInitiatedAtAnotherIn" +
            "stitution_PutRequest")]
        public virtual void AGR_006_07_ValidateAgreementsAPI_CTA_TypeOfTrail_InvestigatorInitiatedAtAnotherInstitution_PutRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_006_07_ValidateAgreementsAPI_CTA-TypeOfTrail-InvestigatorInitiatedAtAnotherIn" +
                    "stitution_PutRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 171
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 172
     testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 173
     testRunner.Then("I retrieve data using unique key received after successful Post Request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementType/hrn",
                            "agreementTypeData/typeOfTrial/hrn",
                            "agreementTypeData/phaseOfStudy/hrn",
                            "agreementTypeData/sponsorProtocolNumber",
                            "agreementTypeData/protocolTitle",
                            "agreementTypeData/protocolDocument/url",
                            "agreementTypeData/consentFormsDocuments/0/url",
                            "agreementTypeData/isReimbursementTobeProvided",
                            "agreementTypeData/willUseCro",
                            "agreementTypeData/cro/hrn",
                            "agreementTypeData/croOther",
                            "agreementTypeData/croContactsOther/1/person/hrn",
                            "agreementTypeData/croContactsOther/2/person/hrn",
                            "agreementTypeData/croContactsOther/2/contactName",
                            "agreementTypeData/croContactsOther/2/contactPhone",
                            "agreementTypeData/croContactsOther/2/contactEmail",
                            "agreementTypeData/croContactPrimary/person/hrn",
                            "agreementTypeData/doesThisInvolveSubrecipients",
                            "agreementTypeData/subrecipientsOrganizations",
                            "agreementTypeData/ctaMaterials/0/materialType/hrn",
                            "agreementTypeData/ctaMaterials/0/useInTrial/hrn",
                            "agreementTypeData/ctaMaterials/0/provider",
                            "agreementTypeData/ctaMaterials/0/materialDescription",
                            "agreementTypeData/doesThisInvolveOtherMaterials",
                            "agreementTypeData/ctaMaterialsOther/0/materialType/hrn",
                            "agreementTypeData/ctaMaterialsOther/0/provider",
                            "agreementTypeData/ctaMaterialsOther/0/materialDescription",
                            "agreementTypeData/isStudyPartOfCooperativeGroup"});
                table63.AddRow(new string[] {
                            "hrn:hrs:lists:agrmt-types/CTA",
                            "hrn:hrs:lists:agrmt-cta-type-trial/inv-init-otr-inst",
                            "hrn:hrs:lists:agrmt-cta-phase-study/phase-2",
                            "Z123EF",
                            "Wyeth ZZ784",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "false",
                            "true",
                            "hrn:hrs:orgs:33",
                            "test",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:811",
                            "contact2",
                            "044-1234567",
                            "contactEmail@huron.com",
                            "hrn:hrs:persons:801",
                            "null",
                            "null",
                            "hrn:hrs:lists:agrmt-cta-material-type/device",
                            "hrn:hrs:lists:agrmt-cta-use-in-trial/standard-of-care",
                            "provider1",
                            "materialDescription12",
                            "true",
                            "hrn:hrs:lists:agrmt-cta-material-type-other/equipment",
                            "provider1",
                            "materialDescription",
                            "true"});
#line 174
      testRunner.When("I update payload of Agreements for put request", ((string)(null)), table63, "When ");
#line hidden
#line 177
          testRunner.When("I perform Put request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 178
  testRunner.Then("I validate status code for Put requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 179
      testRunner.And("I Validate \"agreementType/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 180
      testRunner.And("I Validate \"agreementTypeData/typeOfTrial/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 181
        testRunner.And("I Validate \"agreementTypeData/phaseOfStudy/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 182
        testRunner.And("I Validate \"agreementTypeData/sponsorProtocolNumber\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 183
        testRunner.And("I Validate \"agreementTypeData/protocolTitle\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 184
        testRunner.And("I Validate \"agreementTypeData/isReimbursementTobeProvided\" attribute for Agreemen" +
                        "ts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 185
        testRunner.And("I Validate \"agreementTypeData/willUseCro\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 186
        testRunner.And("I Validate \"agreementTypeData/croOther\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 187
       testRunner.And("I Validate \"agreementTypeData/croContactsOther/1/person/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 188
       testRunner.And("I Validate \"agreementTypeData/croContactPrimary/person/hrn\" attribute for Agreeme" +
                        "nts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 189
       testRunner.And("I Validate \"agreementTypeData/ctaMaterials/0/materialType/hrn\" attribute for Agre" +
                        "ements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 190
       testRunner.And("I Validate \"agreementTypeData/ctaMaterials/0/useInTrial/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 191
       testRunner.And("I Validate \"agreementTypeData/doesThisInvolveOtherMaterials\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 192
     testRunner.And("I Validate \"agreementTypeData/isStudyPartOfCooperativeGroup\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_006_08_ValidateAgreementsAPI_CTA-TypeOfTrail-InvestigatorInitiatedAtAnotherIn" +
            "stitution_PatchRequest")]
        public virtual void AGR_006_08_ValidateAgreementsAPI_CTA_TypeOfTrail_InvestigatorInitiatedAtAnotherInstitution_PatchRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_006_08_ValidateAgreementsAPI_CTA-TypeOfTrail-InvestigatorInitiatedAtAnotherIn" +
                    "stitution_PatchRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 197
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 199
   testRunner.Given("I Set UP URL For APIs with Endpoint as \"/api/agreements\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                            "hrn"});
                table64.AddRow(new string[] {
                            "hrn:hrs:agreements:797"});
#line 200
    testRunner.When("I retrieve data using unique key by Get Request for Agreements", ((string)(null)), table64, "When ");
#line hidden
                TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                            "agreementType/hrn",
                            "agreementTypeData/typeOfTrial/hrn",
                            "agreementTypeData/phaseOfStudy/hrn",
                            "agreementTypeData/sponsorProtocolNumber",
                            "agreementTypeData/protocolTitle",
                            "agreementTypeData/protocolDocument/url",
                            "agreementTypeData/consentFormsDocuments/0/url",
                            "agreementTypeData/isReimbursementTobeProvided",
                            "agreementTypeData/willUseCro",
                            "agreementTypeData/cro/hrn",
                            "agreementTypeData/croOther",
                            "agreementTypeData/croContactsOther/1/person/hrn",
                            "agreementTypeData/croContactsOther/2/person/hrn",
                            "agreementTypeData/croContactsOther/2/contactName",
                            "agreementTypeData/croContactsOther/2/contactPhone",
                            "agreementTypeData/croContactsOther/2/contactEmail",
                            "agreementTypeData/croContactPrimary/person/hrn",
                            "agreementTypeData/doesThisInvolveSubrecipients",
                            "agreementTypeData/subrecipientsOrganizations",
                            "agreementTypeData/ctaMaterials/0/materialType/hrn",
                            "agreementTypeData/ctaMaterials/0/useInTrial/hrn",
                            "agreementTypeData/ctaMaterials/0/provider",
                            "agreementTypeData/ctaMaterials/0/materialDescription",
                            "agreementTypeData/doesThisInvolveOtherMaterials",
                            "agreementTypeData/ctaMaterialsOther/0/materialType/hrn",
                            "agreementTypeData/ctaMaterialsOther/0/provider",
                            "agreementTypeData/ctaMaterialsOther/0/materialDescription",
                            "agreementTypeData/isStudyPartOfCooperativeGroup"});
                table65.AddRow(new string[] {
                            "hrn:hrs:lists:agrmt-types/CTA",
                            "hrn:hrs:lists:agrmt-cta-type-trial/inv-init-otr-inst",
                            "hrn:hrs:lists:agrmt-cta-phase-study/phase-4",
                            "Z123EF",
                            "Wyeth ZZ784",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "false",
                            "true",
                            "hrn:hrs:orgs:33",
                            "test",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:811",
                            "contact2",
                            "044-1234567",
                            "contactEmail@huron.com",
                            "hrn:hrs:persons:801",
                            "null",
                            "null",
                            "hrn:hrs:lists:agrmt-cta-material-type/device",
                            "hrn:hrs:lists:agrmt-cta-use-in-trial/research",
                            "provider1",
                            "materialDescription12",
                            "true",
                            "hrn:hrs:lists:agrmt-cta-material-type-other/other",
                            "provider1",
                            "materialDescription",
                            "true"});
#line 203
    testRunner.When("I create payload for Patch request", ((string)(null)), table65, "When ");
#line hidden
#line 206
    testRunner.When("I perform Patch request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 207
 testRunner.Then("I validate status code for Patch request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 208
      testRunner.And("I Validate \"agreementType/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 209
      testRunner.And("I Validate \"agreementTypeData/typeOfTrial/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 210
        testRunner.And("I Validate \"agreementTypeData/phaseOfStudy/hrn\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 211
        testRunner.And("I Validate \"agreementTypeData/sponsorProtocolNumber\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 212
        testRunner.And("I Validate \"agreementTypeData/protocolTitle\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 213
        testRunner.And("I Validate \"agreementTypeData/isReimbursementTobeProvided\" attribute for Agreemen" +
                        "ts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 214
        testRunner.And("I Validate \"agreementTypeData/willUseCro\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 215
        testRunner.And("I Validate \"agreementTypeData/croOther\" attribute for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 216
       testRunner.And("I Validate \"agreementTypeData/croContactsOther/1/person/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 217
       testRunner.And("I Validate \"agreementTypeData/croContactPrimary/person/hrn\" attribute for Agreeme" +
                        "nts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 218
       testRunner.And("I Validate \"agreementTypeData/ctaMaterials/0/materialType/hrn\" attribute for Agre" +
                        "ements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 219
       testRunner.And("I Validate \"agreementTypeData/ctaMaterials/0/useInTrial/hrn\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 220
       testRunner.And("I Validate \"agreementTypeData/doesThisInvolveOtherMaterials\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 221
       testRunner.And("I Validate \"agreementTypeData/isStudyPartOfCooperativeGroup\" attribute for Agreem" +
                        "ents", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AGR_006_09_ErrorMessagesValidationsForCTA-API")]
        public virtual void AGR_006_09_ErrorMessagesValidationsForCTA_API()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AGR_006_09_ErrorMessagesValidationsForCTA-API", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 224
       this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                            "title",
                            "firstDraftTobeGeneratedInternally",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "agreementType/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementTypeData/phaseOfStudy/hrn",
                            "agreementTypeData/sponsorProtocolNumber",
                            "agreementTypeData/protocolTitle",
                            "agreementTypeData/protocolDocument/url",
                            "agreementTypeData/consentFormsDocuments/0/url",
                            "agreementTypeData/isReimbursementTobeProvided",
                            "agreementTypeData/willUseCro",
                            "agreementTypeData/cro/hrn",
                            "agreementTypeData/croOther",
                            "agreementTypeData/croContactsOther/1/person/hrn",
                            "agreementTypeData/croContactsOther/2/person/hrn",
                            "agreementTypeData/croContactsOther/2/contactName",
                            "agreementTypeData/croContactsOther/2/contactPhone",
                            "agreementTypeData/croContactsOther/2/contactEmail",
                            "agreementTypeData/croContactPrimary/person/hrn",
                            "agreementTypeData/doesThisInvolveSubrecipients",
                            "agreementTypeData/subrecipientsOrganizations",
                            "agreementTypeData/ctaMaterials/0/materialType/hrn",
                            "agreementTypeData/ctaMaterials/0/useInTrial/hrn",
                            "agreementTypeData/ctaMaterials/0/provider",
                            "agreementTypeData/ctaMaterials/0/materialDescription",
                            "agreementTypeData/doesThisInvolveOtherMaterials",
                            "agreementTypeData/ctaMaterialsOther/0/materialType/hrn",
                            "agreementTypeData/ctaMaterialsOther/0/provider",
                            "agreementTypeData/ctaMaterialsOther/0/materialDescription",
                            "agreementTypeData/isStudyPartOfCooperativeGroup"});
                table66.AddRow(new string[] {
                            "Agreement MTA Test 514",
                            "true",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CTA",
                            "hrn:hrs:orgs:309",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-cta-phase-study/phase-1",
                            "FF720W",
                            "Wyeth ZZ784",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "false",
                            "true",
                            "hrn:hrs:orgs:33",
                            "test",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:811",
                            "contact2",
                            "044-1234567",
                            "contactEmail@huron.com",
                            "hrn:hrs:persons:801",
                            "null",
                            "null",
                            "hrn:hrs:lists:agrmt-cta-material-type/other",
                            "hrn:hrs:lists:agrmt-cta-use-in-trial/research",
                            "provider1",
                            "materialDescription12",
                            "true",
                            "hrn:hrs:lists:agrmt-cta-material-type-other/other",
                            "provider1",
                            "materialDescription",
                            "true"});
#line 227
          testRunner.When("I generate payload of Agreements for Post request for CTA API", ((string)(null)), table66, "When ");
#line hidden
#line 230
        testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 231
        testRunner.Then("I Validate the error message for missing required field typeOfTrial in post reque" +
                        "st", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 232
        testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                            "title",
                            "firstDraftTobeGeneratedInternally",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "agreementType/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementTypeData/typeOfTrial/hrn",
                            "agreementTypeData/phaseOfStudy/hrn",
                            "agreementTypeData/sponsorProtocolNumber",
                            "agreementTypeData/protocolTitle",
                            "agreementTypeData/protocolDocument/url",
                            "agreementTypeData/consentFormsDocuments/0/url",
                            "agreementTypeData/isReimbursementTobeProvided",
                            "agreementTypeData/willUseCro",
                            "agreementTypeData/cro/hrn",
                            "agreementTypeData/croOther",
                            "agreementTypeData/croContactsOther/1/person/hrn",
                            "agreementTypeData/croContactsOther/2/person/hrn",
                            "agreementTypeData/croContactsOther/2/contactName",
                            "agreementTypeData/croContactsOther/2/contactPhone",
                            "agreementTypeData/croContactsOther/2/contactEmail",
                            "agreementTypeData/croContactPrimary/person/hrn",
                            "agreementTypeData/doesThisInvolveSubrecipients",
                            "agreementTypeData/subrecipientsOrganizations",
                            "agreementTypeData/ctaMaterials/0/materialType/hrn",
                            "agreementTypeData/ctaMaterials/0/useInTrial/hrn",
                            "agreementTypeData/ctaMaterials/0/provider",
                            "agreementTypeData/ctaMaterials/0/materialDescription",
                            "agreementTypeData/doesThisInvolveOtherMaterials",
                            "agreementTypeData/ctaMaterialsOther/0/materialType/hrn",
                            "agreementTypeData/ctaMaterialsOther/0/provider",
                            "agreementTypeData/ctaMaterialsOther/0/materialDescription",
                            "agreementTypeData/isStudyPartOfCooperativeGroup"});
                table67.AddRow(new string[] {
                            "Agreement MTA Test 514",
                            "true",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CTA",
                            "hrn:hrs:orgs:309",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-cta-type-trial/inv-init-inst",
                            "hrn:hrs:lists:agrmt-cta-phase-study/phase-4",
                            "SPN001",
                            "Wyeth ZZ784",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "false",
                            "true",
                            "hrn:hrs:orgs:33",
                            "test",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:811",
                            "contact2",
                            "044-1234567",
                            "contactEmail@huron.com",
                            "hrn:hrs:persons:801",
                            "null",
                            "null",
                            "hrn:hrs:lists:agrmt-cta-material-type/device",
                            "hrn:hrs:lists:agrmt-cta-use-in-trial/standard-of-care",
                            "provider1",
                            "materialDescription12",
                            "true",
                            "hrn:hrs:lists:agrmt-cta-material-type-other/equipment",
                            "provider1",
                            "materialDescription",
                            "true"});
#line 235
         testRunner.When("I generate payload of Agreements for Post request for CTA API", ((string)(null)), table67, "When ");
#line hidden
#line 238
        testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 239
        testRunner.Then("I Validate the error message for invalid  field sponsorProtocolNumber when typeOf" +
                        "Trial as hrn associated with radiobutton InitiatedAtOurInstitution", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 240
        testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                            "title",
                            "firstDraftTobeGeneratedInternally",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "agreementType/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementTypeData/typeOfTrial/hrn",
                            "agreementTypeData/phaseOfStudy/hrn",
                            "agreementTypeData/sponsorProtocolNumber",
                            "agreementTypeData/protocolTitle",
                            "agreementTypeData/protocolDocument/url",
                            "agreementTypeData/consentFormsDocuments/0/url",
                            "agreementTypeData/isReimbursementTobeProvided",
                            "agreementTypeData/willUseCro",
                            "agreementTypeData/cro/hrn",
                            "agreementTypeData/croOther",
                            "agreementTypeData/croContactsOther",
                            "agreementTypeData/croContactPrimary",
                            "agreementTypeData/doesThisInvolveSubrecipients",
                            "agreementTypeData/subrecipientsOrganizations",
                            "agreementTypeData/ctaMaterials/0/materialType/hrn",
                            "agreementTypeData/ctaMaterials/0/useInTrial/hrn",
                            "agreementTypeData/ctaMaterials/0/provider",
                            "agreementTypeData/ctaMaterials/0/materialDescription",
                            "agreementTypeData/doesThisInvolveOtherMaterials",
                            "agreementTypeData/ctaMaterialsOther/0/materialType/hrn",
                            "agreementTypeData/ctaMaterialsOther/0/provider",
                            "agreementTypeData/ctaMaterialsOther/0/materialDescription",
                            "agreementTypeData/isStudyPartOfCooperativeGroup"});
                table68.AddRow(new string[] {
                            "Agreement MTA Test 514",
                            "true",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CTA",
                            "hrn:hrs:orgs:309",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-cta-type-trial/ind-sp",
                            "hrn:hrs:lists:agrmt-cta-phase-study/phase-1",
                            "FF720W",
                            "Wyeth ZZ784",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "false",
                            "false",
                            "hrn:hrs:orgs:33",
                            "null",
                            "null",
                            "null",
                            "null",
                            "null",
                            "hrn:hrs:lists:agrmt-cta-material-type/other",
                            "hrn:hrs:lists:agrmt-cta-use-in-trial/research",
                            "provider1",
                            "materialDescription12",
                            "true",
                            "hrn:hrs:lists:agrmt-cta-material-type-other/other",
                            "provider1",
                            "materialDescription",
                            "true"});
#line 243
         testRunner.When("I generate payload of Agreements for Post request for CTA API", ((string)(null)), table68, "When ");
#line hidden
#line 246
        testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 247
        testRunner.Then("I Validate the error message for invalid  field CRO  when willUseCro field is mar" +
                        "ked false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 248
        testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                            "title",
                            "firstDraftTobeGeneratedInternally",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "agreementType/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementTypeData/typeOfTrial/hrn",
                            "agreementTypeData/phaseOfStudy/hrn",
                            "agreementTypeData/sponsorProtocolNumber",
                            "agreementTypeData/protocolTitle",
                            "agreementTypeData/protocolDocument/url",
                            "agreementTypeData/consentFormsDocuments/0/url",
                            "agreementTypeData/isReimbursementTobeProvided",
                            "agreementTypeData/willUseCro",
                            "agreementTypeData/cro/hrn",
                            "agreementTypeData/croOther",
                            "agreementTypeData/croContactsOther/1/person/hrn",
                            "agreementTypeData/croContactsOther/2/person/hrn",
                            "agreementTypeData/croContactsOther/2/contactName",
                            "agreementTypeData/croContactsOther/2/contactPhone",
                            "agreementTypeData/croContactsOther/2/contactEmail",
                            "agreementTypeData/croContactPrimary",
                            "agreementTypeData/doesThisInvolveSubrecipients",
                            "agreementTypeData/subrecipientsOrganizations",
                            "agreementTypeData/ctaMaterials/0/materialType/hrn",
                            "agreementTypeData/ctaMaterials/0/useInTrial/hrn",
                            "agreementTypeData/ctaMaterials/0/provider",
                            "agreementTypeData/ctaMaterials/0/materialDescription",
                            "agreementTypeData/doesThisInvolveOtherMaterials",
                            "agreementTypeData/ctaMaterialsOther/0/materialType/hrn",
                            "agreementTypeData/ctaMaterialsOther/0/provider",
                            "agreementTypeData/ctaMaterialsOther/0/materialDescription",
                            "agreementTypeData/isStudyPartOfCooperativeGroup"});
                table69.AddRow(new string[] {
                            "Agreement MTA Test 514",
                            "true",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CTA",
                            "hrn:hrs:orgs:309",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-cta-type-trial/ind-sp",
                            "hrn:hrs:lists:agrmt-cta-phase-study/phase-1",
                            "FF720W",
                            "Wyeth ZZ784",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "false",
                            "false",
                            "null",
                            "null",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:811",
                            "contact2",
                            "044-1234567",
                            "contactEmail@huron.com",
                            "null",
                            "null",
                            "null",
                            "hrn:hrs:lists:agrmt-cta-material-type/other",
                            "hrn:hrs:lists:agrmt-cta-use-in-trial/research",
                            "provider1",
                            "materialDescription12",
                            "true",
                            "hrn:hrs:lists:agrmt-cta-material-type-other/other",
                            "provider1",
                            "materialDescription",
                            "true"});
#line 251
         testRunner.When("I generate payload of Agreements for Post request for CTA API", ((string)(null)), table69, "When ");
#line hidden
#line 254
        testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 255
        testRunner.Then("I Validate the error message for invalid  field croContactsOther  when willUseCro" +
                        " field is marked false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 256
        testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                            "title",
                            "firstDraftTobeGeneratedInternally",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "agreementType/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementTypeData/typeOfTrial/hrn",
                            "agreementTypeData/phaseOfStudy/hrn",
                            "agreementTypeData/sponsorProtocolNumber",
                            "agreementTypeData/protocolTitle",
                            "agreementTypeData/protocolDocument/url",
                            "agreementTypeData/consentFormsDocuments/0/url",
                            "agreementTypeData/isReimbursementTobeProvided",
                            "agreementTypeData/willUseCro",
                            "agreementTypeData/cro/hrn",
                            "agreementTypeData/croOther",
                            "agreementTypeData/croContactsOther",
                            "agreementTypeData/croContactPrimary",
                            "agreementTypeData/doesThisInvolveSubrecipients",
                            "agreementTypeData/subrecipientsOrganizations",
                            "agreementTypeData/ctaMaterials/0/materialType/hrn",
                            "agreementTypeData/ctaMaterials/0/useInTrial/hrn",
                            "agreementTypeData/ctaMaterials/0/provider",
                            "agreementTypeData/ctaMaterials/0/materialDescription",
                            "agreementTypeData/doesThisInvolveOtherMaterials",
                            "agreementTypeData/ctaMaterialsOther/0/materialType/hrn",
                            "agreementTypeData/ctaMaterialsOther/0/provider",
                            "agreementTypeData/ctaMaterialsOther/0/materialDescription",
                            "agreementTypeData/isStudyPartOfCooperativeGroup"});
                table70.AddRow(new string[] {
                            "Agreement MTA Test 514",
                            "true",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CTA",
                            "hrn:hrs:orgs:309",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-cta-type-trial/ind-sp",
                            "hrn:hrs:lists:agrmt-cta-phase-study/phase-4",
                            "null",
                            "Wyeth ZZ784",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "false",
                            "false",
                            "null",
                            "hrn:hrs:persons:301",
                            "null",
                            "null",
                            "null",
                            "null",
                            "hrn:hrs:lists:agrmt-cta-material-type/device",
                            "hrn:hrs:lists:agrmt-cta-use-in-trial/standard-of-care",
                            "provider1",
                            "materialDescription12",
                            "true",
                            "hrn:hrs:lists:agrmt-cta-material-type-other/equipment",
                            "provider1",
                            "materialDescription",
                            "true"});
#line 259
         testRunner.When("I generate payload of Agreements for Post request for CTA API", ((string)(null)), table70, "When ");
#line hidden
#line 262
        testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 263
        testRunner.Then("I Validate the error message for invalid  field croOther  when willUseCro field i" +
                        "s marked false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 264
        testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                            "title",
                            "firstDraftTobeGeneratedInternally",
                            "principalInvestigator/hrn",
                            "primaryContact/hrn",
                            "agreementType/hrn",
                            "responsibleUnit/hrn",
                            "counterParties/0/organization/hrn",
                            "counterParties/0/person/hrn",
                            "agreementTypeData/typeOfTrial/hrn",
                            "agreementTypeData/phaseOfStudy/hrn",
                            "agreementTypeData/sponsorProtocolNumber",
                            "agreementTypeData/protocolTitle",
                            "agreementTypeData/protocolDocument/url",
                            "agreementTypeData/consentFormsDocuments/0/url",
                            "agreementTypeData/isReimbursementTobeProvided",
                            "agreementTypeData/willUseCro",
                            "agreementTypeData/cro/hrn",
                            "agreementTypeData/croOther",
                            "agreementTypeData/croContactsOther",
                            "agreementTypeData/croContactPrimary/person/hrn",
                            "agreementTypeData/doesThisInvolveSubrecipients",
                            "agreementTypeData/subrecipientsOrganizations/0/organization/hrn",
                            "agreementTypeData/ctaMaterials/0/materialType/hrn",
                            "agreementTypeData/ctaMaterials/0/useInTrial/hrn",
                            "agreementTypeData/ctaMaterials/0/provider",
                            "agreementTypeData/ctaMaterials/0/materialDescription",
                            "agreementTypeData/doesThisInvolveOtherMaterials",
                            "agreementTypeData/ctaMaterialsOther/0/materialType/hrn",
                            "agreementTypeData/ctaMaterialsOther/0/provider",
                            "agreementTypeData/ctaMaterialsOther/0/materialDescription",
                            "agreementTypeData/isStudyPartOfCooperativeGroup"});
                table71.AddRow(new string[] {
                            "Agreement MTA Test 514",
                            "true",
                            "hrn:hrs:persons:801",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-types/CTA",
                            "hrn:hrs:orgs:309",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:persons:301",
                            "hrn:hrs:lists:agrmt-cta-type-trial/inv-init-otr-inst",
                            "hrn:hrs:lists:agrmt-cta-phase-study/phase-4",
                            "null",
                            "Wyeth ZZ784",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "https://agreementdocs.s3.us-east-2.amazonaws.com/angiogenesis.pdf",
                            "false",
                            "false",
                            "null",
                            "null",
                            "null",
                            "hrn:hrs:persons:801",
                            "true",
                            "hrn:hrs:orgs:3",
                            "hrn:hrs:lists:agrmt-cta-material-type/device",
                            "hrn:hrs:lists:agrmt-cta-use-in-trial/standard-of-care",
                            "provider1",
                            "materialDescription12",
                            "true",
                            "hrn:hrs:lists:agrmt-cta-material-type-other/equipment",
                            "provider1",
                            "materialDescription",
                            "true"});
#line 267
         testRunner.When("I generate payload of Agreements for Post request for CTA API", ((string)(null)), table71, "When ");
#line hidden
#line 270
        testRunner.When("I perform Post request for Agreements", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 271
        testRunner.Then("I Validate the error message for invalid field croContactPrimary when willUseCro " +
                        "field is marked false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 272
        testRunner.Then("I verify the resource is not created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
