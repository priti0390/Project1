// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HeartTest.Features.CoreServices.ProfileService
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("POC_001_Validate_ProfileService_Organization")]
    [NUnit.Framework.CategoryAttribute("coreservices")]
    [NUnit.Framework.CategoryAttribute("ProfileService")]
    [NUnit.Framework.CategoryAttribute("Organization")]
    [NUnit.Framework.CategoryAttribute("Smoke")]
    public partial class POC_001_Validate_ProfileService_OrganizationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "coreservices",
                "ProfileService",
                "Organization",
                "Smoke"};
        
#line 1 "POC_001_Validate_ProfileService_Organization.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/CoreServices/ProfileService", "POC_001_Validate_ProfileService_Organization", @"<b>Description</b>: Testing Profile Service - Organization for below test scenarios
<br>a) Validated four different requests-> Get, Post, Put & Patch
<br>b) Authenticated API via Bearer Based Token
<br>c) Validating status codes for multiple requests
<br>d) Validating schema for payload and responses
<br>e) Validating each parameter values against post and put requests", ProgrammingLanguage.CSharp, new string[] {
                        "coreservices",
                        "ProfileService",
                        "Organization",
                        "Smoke"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("POC_001_001_Validate_ProfileService_Organization_GetRequest")]
        public virtual void POC_001_001_Validate_ProfileService_Organization_GetRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("POC_001_001_Validate_ProfileService_Organization_GetRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 13
 testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/organizations\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
 testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
    testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
    testRunner.When("I perform Get Request for Profile service - Organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
 testRunner.Then("I validate status code for Get requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
    testRunner.And("I validate Sort by \"id\" in Get Request for Profile service - Organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
    testRunner.And("I validate Sort by \"dateModified\" in Get Request for Profile service - Organizati" +
                        "on", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
    testRunner.Then("I validate filter by \"id\" with value \"1009\" in Get Request for Profile service - " +
                        "Organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
    testRunner.And("I Validate content type for response as \"application/json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("POC_001_002_Validate_ProfileService_Organization_PostRequest")]
        public virtual void POC_001_002_Validate_ProfileService_Organization_PostRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("POC_001_002_Validate_ProfileService_Organization_PostRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 30
 testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/organizations\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 31
    testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
    testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table369 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "name",
                            "alias",
                            "sourceIdentifier",
                            "notes",
                            "contactInformation/city",
                            "contactInformation/email",
                            "contactInformation/phone",
                            "contactInformation/country",
                            "contactInformation/postalCode",
                            "contactInformation/addressLine1",
                            "contactInformation/addressLine2",
                            "contactInformation/stateProvince",
                            "category/id",
                            "category/hrn",
                            "category/name",
                            "category/dateCreated",
                            "category/dateModified",
                            "functions/0/id",
                            "functions/0/hrn",
                            "functions/0/name",
                            "functions/0/dateCreated",
                            "functions/0/dateModified",
                            "active",
                            "dateCreated",
                            "dateModified",
                            "customProperties",
                            "tags",
                            "parent",
                            "hrn"});
                table369.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_name_DateStamp",
                            "null",
                            "QA_sourceIdentifier_DateStamp",
                            "QA_Notes_DateStamp",
                            "QA_City_DateStamp",
                            "QA_Email_DateStamp",
                            "DateStamp",
                            "QA_Country_DateStamp",
                            "DateStamp",
                            "QA_addressLine1_DateStamp",
                            "QA_addressLine2_DateStamp",
                            "OR",
                            "hrn:hrs:lists:org-categories/Division",
                            "hrn:hrs:lists:org-categories/Division",
                            "Division",
                            "",
                            "",
                            "hrn:hrs:lists:org-functions/function1",
                            "hrn:hrs:lists:org-functions/function1",
                            "Function 1",
                            "2022-01-20T07:34:20.4869430",
                            "2022-01-20T07:34:20.4869430",
                            "true",
                            "2022-01-20T07:34:20.4869430",
                            "2022-01-20T07:40:13.4006510",
                            "null",
                            "null",
                            "null",
                            "hrn:hrs:orgs:_DateStamp"});
#line 33
    testRunner.When("I generate payload of Profile service - Organization Service for Post request", ((string)(null)), table369, "When ");
#line hidden
#line 36
 testRunner.When("I perform Post request for Profile service - Organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
    testRunner.Then("I Validate new record after post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 38
     testRunner.Then("I Validate \"notes\" attribute for Profile service - Organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
     testRunner.And("I Validate \"id\" attribute for Profile service - Organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
       testRunner.And("I Validate \"name\" attribute for Profile service - Organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
       testRunner.And("I Validate \"sourceIdentifier\" attribute for Profile service - Organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
       testRunner.And("I Validate \"contactInformation/city\" attribute for Profile service - Organization" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
       testRunner.And("I Validate \"contactInformation/email\" attribute for Profile service - Organizatio" +
                        "n", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
       testRunner.And("I Validate \"contactInformation/phone\" attribute for Profile service - Organizatio" +
                        "n", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
    testRunner.And("I Validate \"contactInformation/country\" attribute for Profile service - Organizat" +
                        "ion", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
    testRunner.And("I Validate \"contactInformation/postalCode\" attribute for Profile service - Organi" +
                        "zation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
    testRunner.And("I Validate \"contactInformation/addressLine1\" attribute for Profile service - Orga" +
                        "nization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
    testRunner.And("I Validate \"contactInformation/addressLine2\" attribute for Profile service - Orga" +
                        "nization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
    testRunner.And("I Validate \"contactInformation/stateProvince\" attribute for Profile service - Org" +
                        "anization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
    testRunner.And("I Validate \"category/id\" attribute for Profile service - Organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
    testRunner.And("I Validate \"category/hrn\" attribute for Profile service - Organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
    testRunner.And("I Validate \"category/name\" attribute for Profile service - Organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
        testRunner.And("I Validate \"customProperties\" attribute for Profile service - Organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
        testRunner.And("I Validate \"tags\" attribute for Profile service - Organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
        testRunner.And("I Validate \"parent\" attribute for Profile service - Organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 56
     testRunner.And("I Validate content type for response as \"application/json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("POC_001_003_Validate_ProfileService_Organization_PutRequest")]
        public virtual void POC_001_003_Validate_ProfileService_Organization_PutRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("POC_001_003_Validate_ProfileService_Organization_PutRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 61
    testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/organizations\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 62
    testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
    testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
    testRunner.When("I retrieve data using ID via Get Request for Profile service - Organization Servi" +
                        "ce", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table370 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "name",
                            "alias",
                            "sourceIdentifier",
                            "notes",
                            "contactInformation/city",
                            "contactInformation/email",
                            "contactInformation/phone",
                            "contactInformation/country",
                            "contactInformation/postalCode",
                            "contactInformation/addressLine1",
                            "contactInformation/addressLine2",
                            "contactInformation/stateProvince",
                            "category/id",
                            "category/hrn",
                            "category/name",
                            "category/dateCreated",
                            "category/dateModified",
                            "functions/0/id",
                            "functions/0/hrn",
                            "functions/0/name",
                            "functions/0/dateCreated",
                            "functions/0/dateModified",
                            "active",
                            "dateCreated",
                            "dateModified",
                            "customProperties",
                            "tags",
                            "parent",
                            "hrn"});
                table370.AddRow(new string[] {
                            "QA_id_DateStamp",
                            "QA_Test_Name_DateStamp",
                            "null",
                            "QA_sourceIdentifier_DateStamp",
                            "New Notes",
                            "MFP",
                            "testuser@gmail.com",
                            "DateStamp",
                            "QA_Country_DateStamp",
                            "DateStamp",
                            "QA_addressLine1_DateStamp",
                            "QA_addressLine2_DateStamp",
                            "OR",
                            "hrn:hrs:lists:org-categories/Division",
                            "hrn:hrs:lists:org-categories/Division",
                            "Division",
                            "",
                            "",
                            "hrn:hrs:lists:org-functions/function1",
                            "hrn:hrs:lists:org-functions/function1",
                            "Function 1",
                            "2022-01-20T07:34:20.4869430",
                            "2022-01-20T07:34:20.4869430",
                            "true",
                            "2022-01-20T07:34:20.4869430",
                            "2022-01-20T07:40:13.4006510",
                            "null",
                            "null",
                            "null",
                            "hrn:hrs:orgs:_DateStamp"});
#line 65
    testRunner.And("I update payload of Profile service - Organization Service for put request", ((string)(null)), table370, "And ");
#line hidden
#line 68
    testRunner.And("I Update \"hrn\" in request payload", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
  testRunner.When("I perform Put request for Profile service - Organization Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 70
 testRunner.Then("I validate status code for Put requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
     testRunner.Then("I Validate \"notes\" attribute for Profile service - Organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
     testRunner.Then("I Validate \"name\" attribute for Profile service - Organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
    testRunner.Then("I Validate \"contactInformation/city\" attribute for Profile service - Organization" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 74
    testRunner.Then("I Validate \"contactInformation/email\" attribute for Profile service - Organizatio" +
                        "n", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 78
    testRunner.And("I Validate content type for response as \"application/json\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("POC_001_004_Validate_ProfileService_Organization_PatchRequest")]
        public virtual void POC_001_004_Validate_ProfileService_Organization_PatchRequest()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("POC_001_004_Validate_ProfileService_Organization_PatchRequest", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 82
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 83
    testRunner.Given("I Set UP URL For APIs with Endpoint as \"api/organizations\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 84
    testRunner.And("I Retrieve Token Key for API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
    testRunner.And("I Validate Expiry for API Token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
    testRunner.When("I retrieve data against parameter value for Profile service - Person Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table371 = new TechTalk.SpecFlow.Table(new string[] {
                            "notes",
                            "hrn",
                            "dateModified"});
                table371.AddRow(new string[] {
                            "Goodnotes_DateStamp",
                            "hrn:hrs:orgs:_DateStamp",
                            "2022-12-30"});
#line 88
    testRunner.And("I provide attributes against Profile service - Organization for patch request", ((string)(null)), table371, "And ");
#line hidden
#line 91
     testRunner.And("I Update \"hrn\" in request payload", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
    testRunner.When("I perform Patch request for Profile service - Organization Service", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 93
 testRunner.Then("I validate status code for Patch requests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 94
    testRunner.Then("I Validate \"notes\" attribute for Profile service - Organization", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
